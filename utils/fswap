#!/bin/sh
# SPDX-License-Identifier: GPL-3.0
# shellcheck disable=SC2046 # ShellCheck incorrect pedantic warning
# shellcheck disable=SC2048 # ShellCheck incorrect pedantic warning

_copyright() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'COPYRIGHT'
Copyright (C) 2021-2022 Dimitar Yurukov <mscalindt@protonmail.com>
COPYRIGHT
}

_license() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'LICENSE'
License GPLv3: GNU GPL version 3
LICENSE
}

_notice() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'NOTICE'
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
NOTICE
}

_version() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'VERSION'
fswap 0.0.0
VERSION
}

usage() {
printf "%s" "\
Usage: fswap [-c] [options]
Create a swap file.

Options:
  -c, --check                only check for an existing swap file and remove
                             it; this option disregards other options
  -l, --location <PATH>      PATH is an absolute or relative location at which
                             the swap file shall be created
  -s, --size <SIZE>          specify size for the swap file; see SIZE format
                             below
  -S, --swappiness <0-200>   specify swap intensity; value persists until
                             reboot
  -v, --vfs-cache-pressure <0-2147483647>
                             specify VFS cache reclaim priority; value persists
                             until reboot
      --help     display this help text and exit
      --version  display version information and exit

The SIZE argument is an integer followed by a unit.
Units are M, G (powers of 1024) or MB, GB (powers of 1000).
Binary prefixes can also be used: MiB=M, GiB=G.

If '-l' is not specified, default value is '\$HOME/.swapfile'.
If '-s' is not specified, default value is '1G'.

External utilities hard dependency list:
chmod, dd, id, mkswap, rm, swapoff, swapon.
External utilities soft dependency list:
cat.
"
}

version() {
    _version; echo
    _copyright; echo
    _license; _notice;
}

# Description:
# Print error and exit
#
# Parameters:
# <$1> - exit code
# <"$2+"> - text
#
err() {
    i=$1 && shift
    printf "\n%bERROR:%b %s\n\n" "\033[1;31m" "\033[0m" "$*" 1>&2
    exit $i
}

# Description:
# Convert relative path to absolute path
#
# Parameters:
# <"$1"> - path
#
# Returns:
# (0) absolute path / path is already absolute
#
get_fpath() {
    case "$1" in
        "/"*) printf "%s" "$1" ;;
        *) printf "%s/%s" "$PWD" "$1" ;;
    esac

    return 0
}

# Description:
# Print info
#
# Parameters:
# <"$1+"> - text
#
info() {
    printf "%bINFO:%b %s\n" "\033[1;37m" "\033[0m" "$*"
}

# Description:
# Print info with printf prefix before text
#
# Parameters:
# <"$1"> - printf prefix
# <"$2+"> - text
#
info_px() {
    i="$1" && shift
    printf "%bINFO:%b $i%s\n" "\033[1;37m" "\033[0m" "$*"
}

# Description:
# Print a warning
#
# Parameters:
# <"$1+"> - text
#
warn() {
    printf "%bWARNING:%b %s\n" "\033[1;33m" "\033[0m" "$*"
}

# Description:
# Apply value to location
#
# Parameters:
# <"$1"> - value
# <$2> - location
#
_fwrite() {
    [ -w "$2" ] && printf -- "%s\n" "$1" > "$2" || \
    warn "Could not apply '$1' on '$2'. (!-w)"
}

fswap_env() {
    [ -z "$ssize" ] && ssize=1G
    [ -z "$sfile" ] && sfile="$HOME"/.swapfile
}

fswap_check() {
    case $(id -u) in
        0) : ;;
        *) err 2 "EUID is not 0. (no root)" ;;
    esac

    swapoff -a || exit $?

    [ -f "$sfile" ] && rm -f "$sfile"
}

fswap_info() {
    hash cat > /dev/null 2>&1

    TMP=$(cat /sys/module/zswap/parameters/enabled 2> /dev/null)
    [ -n "$TMP" ] && info_px "\033[1;36mMISC:\033[0m " "zswap: '$TMP'."

    TMP=$(cat /sys/module/zswap/parameters/compressor 2> /dev/null)
    [ -n "$TMP" ] && info_px "\033[1;36mMISC:\033[0m " "zswap compressor:" \
                             "'$TMP'."

    TMP=$(cat /sys/module/zswap/parameters/zpool 2> /dev/null)
    [ -n "$TMP" ] && info_px "\033[1;36mMISC:\033[0m " "zswap allocator:" \
                             "'$TMP'."

    TMP=$(cat /proc/sys/vm/swappiness 2> /dev/null)
    if [ -n "$TMP" ] && [ -n "$swappiness" ]; then
        case $TMP in
        $swappiness) info "Swap intensity: '$TMP'." ;;
        *)
            info_px "\033[1;35mOLD:\033[0m " "Swap intensity: '$TMP'."
            info_px "\033[1;34mNEW:\033[0m " "Swap intensity: '$swappiness'."
        ;;
        esac
    elif [ -n "$TMP" ]; then
        info "Swap intensity: '$TMP'."
    fi

    TMP=$(cat /proc/sys/vm/vfs_cache_pressure 2> /dev/null)
    if [ -n "$TMP" ] && [ -n "$vfscp" ]; then
        case $TMP in
        $vfscp) info "VFS cache reclaim priority: '$TMP'." ;;
        *)
            info_px "\033[1;35mOLD:\033[0m " "VFS cache reclaim priority:" \
                    "'$TMP'."
            info_px "\033[1;34mNEW:\033[0m " "VFS cache reclaim priority:" \
                    "'$vfscp'."
        ;;
        esac
    elif [ -n "$TMP" ]; then
        info "VFS cache reclaim priority: '$TMP'."
    fi

    info "Swap size: '$ssize'."
    info "Swap file: '$sfile'."
}

fswap_work() {
    case "$ssize" in
        *"M" | *"MiB") ssize="${ssize%M*}" && ssize="${ssize}K" ;;
        *"G" | *"GiB") ssize="${ssize%G*}" && ssize="${ssize}M" ;;

        *"MB") ssize="${ssize%MB}" && ssize="${ssize}KB" ;;
        *"GB") ssize="${ssize%GB}" && ssize="${ssize}MB" ;;

        *) err 2 "Wrong swap size specified. Supported units: M,G[B]" ;;
    esac

    case "$ssize" in
        *"B") bscount=1000 ;;
        *) bscount=1024 ;;
    esac
}

fswap_exec() {
    dd "if=/dev/zero" "of=$sfile" \
       "bs=$ssize" "count=$bscount" \
       "status=progress" || exit $?
    chmod 600 "$sfile" || exit $?
    mkswap "$sfile" || exit $?
    swapon "$sfile" || exit $?
}

fswap_post() {
    [ -n "$swappiness" ] && _fwrite $swappiness /proc/sys/vm/swappiness
    [ -n "$vfscp" ] && _fwrite $vfscp /proc/sys/vm/vfs_cache_pressure
}

fswap() {
    fswap_env;
    fswap_check;
    fswap_info;
    fswap_work;
    fswap_exec;
    fswap_post;
}

main_functions() {
    # Description:
    # Signify invalid operand count (min)[0>X]
    #
    opd_min() {
        set -- "${0##*/}"
        printf "%s: No operand specified.\n" "$1" 1>&2
        printf "%s: Try '%s --help' for more information.\n" "$1" "$1" 1>&2
    }

    # Description:
    # Signify invalid operand count (max)[X>1]
    #
    # Parameters:
    # <"$1"> - count
    #
    opd_cmax() {
        set -- "${0##*/}" "$1"
        printf "%s: Too many operands: %d\n" "$1" "$2" 1>&2
        printf "%s: Try '%s --help' for more information.\n" "$1" "$1" 1>&2
    }

    # Description:
    # Signify invalid operand count (max)[2>1]
    #
    # Parameters:
    # <"$1"> - first operand
    # <"$2"> - second operand
    #
    opd_max() {
        set -- "${0##*/}" "$1" "$2"
        printf "%s: Too many operands: '[%s]; [%s]'\n" "$1" "$2" "$3" 1>&2
        printf "%s: Try '%s --help' for more information.\n" "$1" "$1" 1>&2
    }

    # Description:
    # Signify invalid option
    #
    # Parameters:
    # <"$1"> - option
    #
    opt_invalid() {
        set -- "${0##*/}" "$1"
        printf "%s: Invalid option: '%s'\n" "$1" "$2" 1>&2
        printf "%s: Try '%s --help' for more information.\n" "$1" "$1" 1>&2
    }

    # Description:
    # Signify unknown (*) option
    #
    # Parameters:
    # <"$1"> - option
    #
    opt_unknown() {
        set -- "${0##*/}" "$1"
        printf "%s: Unknown option: '%s'\n" "$1" "$2" 1>&2
        printf "%s: Try '%s --help' for more information.\n" "$1" "$1" 1>&2
    }

    # Description:
    # Signify unrecognized ('--') option
    #
    # Parameters:
    # <"$1"> - option
    #
    opt_unrecognized() {
        set -- "${0##*/}" "$1"
        printf "%s: Unrecognized option: '%s'\n" "$1" "$2" 1>&2
        printf "%s: Try '%s --help' for more information.\n" "$1" "$1" 1>&2
    }

    # Description:
    # Return 0 if complex (arg) option in option holder [$i]
    #
    # Parameters (<1+>):
    # ["$1"] - -*
    # ["$2"] - --*
    #
    # Provides:
    # <"$ii"> - option argument
    # <"$n"> - shift count
    #
    copt() {
        case ":$i" in :) return 1 ;; esac

        case "$i" in
        "--"*)
            case "$1:$2" in
                "--"*":$2") : ;;
                "$1:--"*) set -- "$2" ;;
                *) return 1 ;;
            esac
        ;;
        "-"*)
            case "$1:$2" in
                "-"*":$2") : ;;
                "$1:-"*) set -- "$2" ;;
                *) return 1 ;;
            esac
        ;;
        esac

        case "$ii:$i " in
            :"$1 ")
                printf "%s: Option '%s' requires an argument.\n" \
                       "${0##*/}" "$1" 1>&2
                printf "%s: Try '%s --help' for more information.\n" \
                       "${0##*/}" "${0##*/}" 1>&2
                exit 2
           ;;
        esac

        case "$i" in
        "--"*)
            case "$i " in
                "$1= ")
                    printf "%s: Invalid argument specification for: '%s'\n" \
                           "${0##*/}" "$1" 1>&2
                    printf "%s: Try '%s --help' for more information.\n" \
                           "${0##*/}" "${0##*/}" 1>&2
                    exit 2
                ;;
                "$1 ")
                    n=2
                    unset i; return 0
                ;;
                "$1="*)
                    ii="${i#"$1"=}"; n=1
                    unset i; return 0
                ;;
            esac
        ;;
        "-"*)
            case "$i " in
                "$1 ")
                    n=2
                    unset i; return 0
                ;;
                "$1"*)
                    ii="${i#"$1"}"; n=1
                    unset i; return 0
                ;;
            esac
        ;;
        esac

        return 1
    }

    # Description:
    # Return 0 if perhaps complex (arg) option in option holder [$i]
    #
    # Parameters (<1+>):
    # ["$1"] - -*
    # ["$2"] - --*
    #
    # Provides:
    # ["$ii"] - option argument
    # <"$n"> - shift count
    #
    copt_optional() {
        case ":$i" in :) return 1 ;; esac

        case "$i" in
        "--"*)
            case "$1:$2" in
                "--"*":$2") : ;;
                "$1:--"*) set -- "$2" ;;
                *) return 1 ;;
            esac

            case "$i" in
                "$1=")
                    printf "%s: Invalid argument specification for: '%s'\n" \
                           "${0##*/}" "$1" 1>&2
                    printf "%s: Try '%s --help' for more information.\n" \
                           "${0##*/}" "${0##*/}" 1>&2
                    exit 2
                ;;
                "$1")
                    n=1
                    unset i ii; return 0
                ;;
                "$1="*)
                    ii="${i#"$1"=}"; n=1
                    unset i; return 0
                ;;
            esac
        ;;
        "-"*)
            case "$1:$2" in
                "-"*":$2") : ;;
                "$1:-"*) set -- "$2" ;;
                *) return 1 ;;
            esac

            case "$i" in
                "$1")
                    n=1
                    unset i ii; return 0
                ;;
                "$1"*)
                    ii="${i#"$1"}"; n=1
                    unset i; return 0
                ;;
            esac
        ;;
        esac

        return 1
    }

    # Description:
    # Return 0 if specific complex (arg) option in option holder [$i]
    #
    # Parameters:
    # <"$1"+> - *
    #
    # Provides:
    # <"$ii"> - option argument
    # <"$n"> - shift count
    #
    scopt() {
        case ":$i" in :) return 1 ;; esac

        while [ "$1" ]; do
            case "$ii:$i " in
                :"$1 ")
                    printf "%s: Option '%s' requires an argument.\n" \
                           "${0##*/}" "$1" 1>&2
                    printf "%s: Try '%s --help' for more information.\n" \
                           "${0##*/}" "${0##*/}" 1>&2
                    exit 2
                ;;
                "$ii:$1= ")
                    printf "%s: Invalid argument specification for: '%s'\n" \
                           "${0##*/}" "$1" 1>&2
                    printf "%s: Try '%s --help' for more information.\n" \
                           "${0##*/}" "${0##*/}" 1>&2
                    exit 2
                ;;
                "$ii:$1 ")
                    n=2
                    unset i; return 0
                ;;
                "$ii:$1="*)
                    ii="${i#"$1"=}"; n=1
                    unset i; return 0
                ;;
                *)
                    shift
                ;;
            esac
        done

        return 1
    }

    # Description:
    # Return 0 if specific perhaps complex (arg) option in option holder [$i]
    #
    # Parameters:
    # <"$1"+> - *
    #
    # Provides:
    # ["$ii"] - option argument
    # <"$n"> - shift count
    #
    scopt_optional() {
        case ":$i" in :) return 1 ;; esac

        while [ "$1" ]; do
            case "$i" in
                "$1=")
                    printf "%s: Invalid argument specification for: '%s'\n" \
                           "${0##*/}" "$1" 1>&2
                    printf "%s: Try '%s --help' for more information.\n" \
                           "${0##*/}" "${0##*/}" 1>&2
                    exit 2
                ;;
                "$1")
                    n=1
                    unset i ii; return 0
                ;;
                "$1="*)
                    ii="${i#"$1"=}"; n=1
                    unset i; return 0
                ;;
                *)
                    shift
                ;;
            esac
        done

        return 1
    }

    # Description:
    # Return 0 if simple (!arg) option in option holder [$i]
    #
    # Parameters (<1+>):
    # ["$1"] - -*
    # ["$2"] - --*
    #
    sopt() {
        case ":$i" in :) return 1 ;; esac

        case "$i" in
        "--"*)
            case "$1:$2" in
                "--"*":$2") : ;;
                "$1:--"*) set -- "$2" ;;
                *) return 1 ;;
            esac

            case "$i" in
                "$1")
                    n=1
                    unset i; return 0
                ;;
            esac
        ;;
        "-"*)
            case "$1:$2" in
                "-"*":$2") : ;;
                "$1:-"*) set -- "$2" ;;
                *) return 1 ;;
            esac

            case "$i" in
                "$1"*)
                    case ":$optind" in
                        :) optind="@$1@" ;;
                        *) optind="$optind @$1@" ;;
                    esac

                    i="-${i#??}"; n=1
                    return 0
               ;;
            esac
        ;;
        esac

        return 1
    }

    # Description:
    # Return 0 if specific simple (!arg) option in option holder [$i]
    #
    # Parameters:
    # <"$1"+> - *
    #
    ssopt() {
        case ":$i" in :) return 1 ;; esac

        while [ "$1" ]; do
            case "$i" in
                "$1")
                    n=1
                    unset i; return 0
                ;;
                *)
                    shift
                ;;
            esac
        done

        return 1
    }
}

# Description:
# Substitute the function call with script options
#
# Parameters:
# <"$1"> - mode('0' - print standard ('-'; '--') utility options)
#
main_options() {
    case $1 in
    0)
        sopt "-c" "--check" && { fswap_env; fswap_check; exit 0; }

        copt "-l" "--location" && {
            sfile=$(get_fpath "$ii")
        }
        copt "-s" "--size" && {
            ssize="$ii"
        }
        copt "-S" "--swappiness" && {
            swappiness="$ii"
        }
        copt "-v" "--vfs-cache-pressure" && {
            vfscp="$ii"
        }
    ;;
    esac
}

main() {
    # For practical reasons, unset conditional variables if they exist
    # > special:
    unset RC
    # > options:
    unset sfile ssize swappiness vfscp

    # Source common functions
    main_functions;

    # Parse options
    while [ "$1" ]; do
        # Simulate global $N (positional parameters) shift
        #  > option functions modify when appropriate
        n=1

        # Simulate global $1/$2 (option/argument) handling
        #  > option functions modify when appropriate
        i="$1"; ii="$2"

        # Parse standard options
        #  > required to parse them first
        ssopt "-" && { opt_invalid "$1"; exit 2; }
        ssopt "--" && { opt_invalid "$1"; exit 2; }
        ssopt "--help" && { usage; exit 0; }
        ssopt "--version" && { version; exit 0; }

        # Loop on the option holder until fully parsed
        #  > as we might need to loop on its characters
        while [ -n "$i" ]; do
            unset optind

            case "$i" in
                "-"*) main_options 0 ;;
            esac

            case ":$i" in
            :"--"*)
                opt_unrecognized "$i"; exit 2
            ;;
            :"-"*)
                case ":$optind" in
                    :) opt_invalid "${i%"${i#??}"}"; exit 2 ;;
                esac

                case ${#i} in
                    1) unset optind && break ;;
                esac
            ;;
            :)
                :
            ;;
            *)
                opt_unknown "$i"; exit 2
            ;;
            esac
        done

        # Move on positional parameters
        #  > either with default value or with option value
        shift $n
    done

    # Execute the core function
    fswap;

    # Check if RC is set, otherwise explicit success
    [ -n "$RC" ] && return $RC || return 0
}

main "$@"
