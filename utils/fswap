#!/bin/sh
# SPDX-License-Identifier: GPL-3.0-only
# shellcheck disable=SC2046 # ShellCheck incorrect pedantic warning
# shellcheck disable=SC2048 # ShellCheck incorrect pedantic warning

_copyright() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'COPYRIGHT'
Copyright (C) 2021-2022 Dimitar Yurukov <mscalindt@protonmail.com>
COPYRIGHT
}

_description() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'DESCRIPTION'
Create a swap file.
DESCRIPTION
}

_license() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'LICENSE'
License GPLv3: GNU GPL version 3
LICENSE
}

_misc() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'MISC'
The SIZE argument is an integer followed by a unit.
Units are M, G (powers of 1024) or MB, GB (powers of 1000).
Binary prefixes can also be used: MiB=M, GiB=G.

If '-l'/'--location' is not specified, default value is '$HOME/.swapfile'.
If '-s'/'--size' is not specified, default value is '1G'.

External utilities hard dependency list:
chmod, dd, id, mkswap, rm, swapoff, swapon.
External utilities soft dependency list:
cat.
MISC
}

_notice() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'NOTICE'
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
NOTICE
}

_options() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'OPTIONS'
Options:
  -c, --check                only check for an existing swap file and remove
                             it
  -l, --location <PATH>      PATH is an absolute or relative location at which
                             the swap file shall be created
  -s, --size <SIZE>          specify size for the swap file; see SIZE format
                             below
  -S, --swappiness <0-200>   specify swap intensity; value persists until
                             reboot
  -v, --vfs-cache-pressure <0-2147483647>
                             specify VFS cache reclaim priority; value persists
                             until reboot
      --language <LANG>      custom LANG for LANG
      --locale <LANG>        custom LANG for LC_ALL
      --no-color             colorless output on all streams
      --help     display this help text and exit
      --version  display version information and exit
OPTIONS
}

_usage() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'USAGE'
Usage: fswap [options] [-c]
USAGE
}

_version() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'VERSION'
fswap 0.0.0
VERSION
}

usage() {
    _usage; _description; echo
    _options; echo
    _misc;
}

version() {
    _version; echo
    _copyright; echo
    _license; _notice;
}

# Description:
# Print error and exit
#
# Parameters:
# <$1> - exit code
# <"$2"+> - text
#
err() {
    _rc="$1"; shift
    printf "ERROR: %s\n" "$*" 1>&2
    exit "$_rc"
}

# Description:
# Colorfully print error and exit
#
# Parameters:
# <$1> - exit code
# <"$2"+> - text
#
err_clr() {
    _rc="$1"; shift
    printf "%bERROR:%b %s\n" '\033[1;31m' '\033[0m' "$*" 1>&2
    exit "$_rc"
}

# Description:
# Convert relative path to absolute path
#
# Parameters:
# <"$1"> - path
# [$2] - mode0('0' - no output)
#
# Provides:
# <"$_path"> - the absolute path | path
#
# Returns:
# (0) absolute $1 | $1
#
get_fpath() {
    case "$1" in
        '/'*) _path="$1" ;;
        *) _path="$PWD/$1" ;;
    esac

    [ ! "$2" ] && printf "%s" "$_path"
}

# Description:
# Print info
#
# Parameters:
# <"$1"+> - text
#
# Returns:
# (0) info-formatted $1
#
info() {
    printf "INFO: %s\n" "$*"
}

# Description:
# Colorfully print info
#
# Parameters:
# <"$1"+> - text
#
# Returns:
# (0) info-formatted $1
#
info_clr() {
    printf "%bINFO:%b %s\n" '\033[1;37m' '\033[0m' "$*"
}

# Description:
# Print info with printf format before text
#
# Parameters:
# <"$1"> - printf format
# <"$2"+> - text
#
# Returns:
# (0) info-formatted $2
#
info_fmt() {
    _printf_fmt="$1"; shift
    printf "INFO: ${_printf_fmt}%s\n" "$*"
}

# Description:
# Colorfully print info with printf format before text
#
# Parameters:
# <"$1"> - printf format
# <"$2"+> - text
#
# Returns:
# (0) info-formatted $2
#
info_fmt_clr() {
    _printf_fmt="$1"; shift
    printf "%bINFO:%b ${_printf_fmt}%s\n" '\033[1;37m' '\033[0m' "$*"
}

# Description:
# Print a warning
#
# Parameters:
# <"$1"+> - text
#
# Returns:
# (0) warning-formatted $1
#
warn() {
    printf "WARNING: %s\n" "$*"
}

# Description:
# Colorfully print a warning
#
# Parameters:
# <"$1"+> - text
#
# Returns:
# (0) warning-formatted $1
#
warn_clr() {
    printf "%bWARNING:%b %s\n" '\033[1;33m' '\033[0m' "$*"
}

# Description:
# Write value to a file (overwrite)
#
# Parameters:
# <"$1"> - value
# <"$2"> - file
#
# Returns:
# (0) success
# (1) not a file | file does not exist
# (2) file access error
#
_fwrite() {
    [ -f "$2" ] || return 1

    if [ ! -w "$2" ]; then
        case "$(cat "$2" 2> /dev/null)" in
            "$1") return 0 ;;
        esac

        return 2
    fi

    printf "%s\n" "$1" > "$2"
}

_fswap() {
    case :"$locale" in
        :)
            LCgo() {
                agj5k97oN05exMQq="$LC_ALL"
                export LC_ALL=C
            }
        ;;
        *)
            LCgo() {
                agj5k97oN05exMQq="$LC_ALL"
                export LC_ALL="$locale"
            }
        ;;
    esac
    LCstop() { export LC_ALL="$agj5k97oN05exMQq"; }
    LCreset() { LCstop; LCgo; }

    case :"$language" in
        :)
            LANGgo() {
                WIxPdnq3AX2uzCuR="$LANG"
                export LANG=C
            }
        ;;
        *)
            LANGgo() {
                WIxPdnq3AX2uzCuR="$LANG"
                export LANG="$language"
            }
        ;;
    esac
    LANGstop() { export LANG="$WIxPdnq3AX2uzCuR"; }
    LANGreset() { LANGstop; LANGgo; }

    LCgo; LANGgo;

    case :"$ncolor$NO_COLOR" in
        :)
            ES_inf='\033[1;37m'
            ES_neg='\033[1;31m'
            ES_pos='\033[1;32m'
            ES_res='\033[0m'

            err() { err_clr "$@"; }
            info() { info_clr "$@"; }
            info_fmt() { info_fmt_clr "$@"; }
            warn() { warn_clr "$@"; }

            [ "$NO_COLOR" ] && export NO_COLOR=
        ;;
        *)
            ES_inf=
            ES_neg=
            ES_pos=
            ES_res=

            [ "$NO_COLOR" ] || export NO_COLOR=1
        ;;
    esac
}

fswap_env() {
    ss_path=/proc/sys/vm/swappiness
    vfscp_path=/proc/sys/vm/vfs_cache_pressure
    zswap_path=/sys/module/zswap/parameters/enabled
    zswapar_path=/sys/module/zswap/parameters/zpool
    zswapcr_path=/sys/module/zswap/parameters/compressor

    [ "$size" ] || size=1G
    [ "$location" ] || location="$HOME"/.swapfile
}

fswap_check() {
    case $(id -u) in
        0) : ;;
        *) err 2 'EUID is not 0. (no root)' ;;
    esac

    swapoff -a || exit "$?"

    [ -f "$location" ] && rm -f "$location"
}

fswap_info() {
    TMP=$(cat "$zswap_path" 2> /dev/null)
    [ "$TMP" ] && info_fmt "${ES_inf}MISC:${ES_res} " "zswap: '$TMP'."

    TMP=$(cat "$zswapar_path" 2> /dev/null)
    [ "$TMP" ] && info_fmt "${ES_inf}MISC:${ES_res} " "zswap allocator: '$TMP'."

    TMP=$(cat "$zswapcr_path" 2> /dev/null)
    [ "$TMP" ] && info_fmt "${ES_inf}MISC:${ES_res} " "zswap compressor:" \
                           "'$TMP'."

    TMP=$(cat "$ss_path" 2> /dev/null)
    case $swappiness:$TMP in
        :)
            :
        ;;
        :"$TMP" | "$TMP":"$swappiness")
            info "Swap intensity: '$TMP'."
        ;;
        *)
            info_fmt "${ES_neg}OLD:${ES_res} " "Swap intensity: '$TMP'."
            info_fmt "${ES_pos}NEW:${ES_res} " "Swap intensity: '$swappiness'."
        ;;
    esac

    TMP=$(cat "$vfscp_path" 2> /dev/null)
    case $vfscp:$TMP in
        :)
            :
        ;;
        :"$TMP" | "$TMP":"$vfscp")
            info "VFS cache reclaim priority: '$TMP'."
        ;;
        *)
            info_fmt "${ES_neg}OLD:${ES_res} " "VFS cache reclaim priority:" \
                     "'$TMP'."
            info_fmt "${ES_pos}NEW:${ES_res} " "VFS cache reclaim priority:" \
                     "'$vfscp'."
        ;;
    esac

    info "Swap size: '$size'."
    info "Swap file: '$location'."
}

fswap_work() {
    case $size in
        *'M' | *'MiB') size="${size%M*}"K ;;
        *'G' | *'GiB') size="${size%G*}"M ;;
        *'MB') size="${size%MB}"KB ;;
        *'GB') size="${size%GB}"MB ;;
        *) err 2 'Wrong swap size specified. Supported units: M,G[B]' ;;
    esac

    case $size in
        *'B') bscount=1000 ;;
        *) bscount=1024 ;;
    esac
}

fswap_exec() {
    dd 'if=/dev/zero' "of=$location" \
       "bs=$size" "count=$bscount" \
       'status=progress' && \
    chmod 600 "$location" && \
    mkswap "$location" && \
    swapon "$location"
}

fswap_post() {
    if [ "$swappiness" ]; then
        _fwrite "$swappiness" "$ss_path" || {
            warn "Failed to apply '$swappiness' on '$ss_path'. (RC = $?)"
        }
    fi

    if [ "$vfscp" ]; then
        _fwrite "$vfscp" "$vfscp_path" || {
            warn "Failed to apply '$vfscp' on '$vfscp_path'. (RC = $?)"
        }
    fi
}

fswap() {
    _fswap
    fswap_env
    fswap_check
    fswap_info
    fswap_work
    fswap_exec || exit "$?"
    fswap_post
}

main_functions() {
    # Description:
    # Assert a string
    #
    # Parameters:
    # <$1> - mode1-3('1' - N [0,1,00,01...],
    #                '2' - whole N [0,1...],
    #                '3' - natural N [1...],
    #                '4' - absolute path,
    #                '5' - relative path,
    #                '6' - valid path)
    # <"$2"> - string
    #
    # Returns:
    # (0) true
    # (1) false
    #
    assert() {
        case $1 in
            1)
                case :"$2${2#*[!0123456789]}" in
                    :) return 1 ;;
                    :"$2$2") : ;;
                    *) return 1 ;;
                esac
            ;;
            2)
                case :"$2${2#*[!0123456789]}" in
                    :) return 1 ;;
                    :00) : ;;
                    :0*) return 1 ;;
                    :"$2$2") : ;;
                    *) return 1 ;;
                esac
            ;;
            3)
                case :"$2${2#*[!0123456789]}" in
                    : | :0*) return 1 ;;
                    :"$2$2") : ;;
                    *) return 1 ;;
                esac
            ;;
            4)
                case "$2" in
                    *'//'*) return 1 ;;
                    '/'*) : ;;
                    *) return 1 ;;
                esac
            ;;
            5)
                case "$2" in
                    *'//'* | '/'*) return 1 ;;
                esac
            ;;
            6)
                case "$2" in
                    *'//'*) return 1 ;;
                esac
            ;;
        esac
    }

    # Description:
    # True if complex (argument) option
    #
    # Parameters (<1+>):
    # ["$1"] - -*
    # ["$2"] - --*
    #
    # Uses:
    # <_opt> $ - the first positional parameter of the main environment
    # <_opt_arg> $ - the second positional parameter of the main environment
    #
    # Provides:
    # <"$_opt_arg"> - the option argument
    # <"$_opt_match"> - the literal option matched
    # <$_shiftN> - the shift count
    #
    # Returns:
    # (0) match
    # (1) no match
    #
    copt() {
        copt_arg_invalid() {
            printf "%s: Invalid argument specification for: '%s'\n" \
                   "${0##*/}" "$1" 1>&2
            printf "%s: Try '%s --help' for more information.\n" \
                   "${0##*/}" "${0##*/}" 1>&2
        }
        copt_arg_missing() {
            printf "%s: Option '%s' requires an argument.\n" \
                   "${0##*/}" "$1" 1>&2
            printf "%s: Try '%s --help' for more information.\n" \
                   "${0##*/}" "${0##*/}" 1>&2
        }

        [ "$_opt" ] || return 1

        case "$_opt" in
            '--'*)
                case "$1$2" in
                    '--'*) : ;;
                    "$1"'--'*) set -- "$2" ;;
                    *) return 1 ;;
                esac

                case "$_opt " in
                    "$1"'= ')
                        copt_arg_invalid "$1"
                        exit 2
                    ;;
                    "$1"'='*)
                        _opt_arg="${_opt#"$1"=}"; _opt=; _opt_match="$1"; \
                        _shiftN=1
                        return 0
                    ;;
                    "$1"' ')
                        [ "$_opt_arg" ] || { copt_arg_missing "$1"; exit 2; }

                        _opt=; _opt_match="$1"; _shiftN=2
                        return 0
                    ;;
                esac
            ;;
            '-'*)
                case "$1$2" in
                    '-'*) : ;;
                    *) return 1 ;;
                esac

                case "$_opt " in
                    "$1"' ')
                        [ "$_opt_arg" ] || { copt_arg_missing "$1"; exit 2; }

                        _opt=; _opt_match="$1"; _shiftN=2
                        return 0
                    ;;
                    "$1"*)
                        _opt_arg="${_opt#"$1"}"; _opt=; _opt_match="$1"; \
                        _shiftN=1
                        return 0
                    ;;
                esac
            ;;
        esac

        return 1
    }

    # Description:
    # True if optional-complex (possible argument) option
    #
    # Parameters (<1+>):
    # ["$1"] - -*
    # ["$2"] - --*
    #
    # Uses:
    # <_opt> $ - the first positional parameter of the main environment
    #
    # Provides:
    # <"$_opt_arg"> - the option argument
    # <"$_opt_match"> - the literal option matched
    # <$_shiftN> - the shift count
    #
    # Returns:
    # (0) match
    # (1) no match
    #
    copt_optional() {
        copt_arg_invalid() {
            printf "%s: Invalid argument specification for: '%s'\n" \
                   "${0##*/}" "$1" 1>&2
            printf "%s: Try '%s --help' for more information.\n" \
                   "${0##*/}" "${0##*/}" 1>&2
        }

        [ "$_opt" ] || return 1

        case "$_opt" in
            '--'*)
                case "$1$2" in
                    '--'*) : ;;
                    "$1"'--'*) set -- "$2" ;;
                    *) return 1 ;;
                esac

                case "$_opt" in
                    "$1"'=')
                        copt_arg_invalid "$1"
                        exit 2
                    ;;
                    "$1"'='*)
                        _opt_arg="${_opt#"$1"=}"; _opt=; _opt_match="$1"; \
                        _shiftN=1
                        return 0
                    ;;
                    "$1")
                        _opt=; _opt_arg=; _opt_match="$1"; _shiftN=1
                        return 0
                    ;;
                esac
            ;;
            '-'*)
                case "$1$2" in
                    '-'*) : ;;
                    *) return 1 ;;
                esac

                case "$_opt" in
                    "$1")
                        _opt=; _opt_arg=; _opt_match="$1"; _shiftN=1
                        return 0
                    ;;
                    "$1"*)
                        _opt_arg="${_opt#"$1"}"; _opt=; _opt_match="$1"; \
                        _shiftN=1
                        return 0
                    ;;
                esac
            ;;
        esac

        return 1
    }

    # Description:
    # Within single quotes escape single quote(s) in string
    #
    # Parameters:
    # <"$1"+> - string
    #
    # Provides:
    # <"$_str"> - the escaped string | string
    #
    # Returns:
    # (0) escaped string | string
    #
    esc_sq() {
        [ "$1" ] || return 0

        _str="$1"

        case "$_str" in
            *"'"*)
                _str_ref="${_str%%\'*}'\\''"
                _str="${_str_ref}${_str#*\'}"

                while :; do case "$_str" in
                    "$_str_ref"*"'"*)
                        _str="${_str#*"$_str_ref"}"
                        _str_ref="$_str_ref${_str%%\'*}'\\''"
                        _str="$_str_ref${_str#*\'}"
                    ;;
                    *)
                        break
                    ;;
                esac done
            ;;
        esac

        _str="'$_str'"; printf "%s" "$_str"; shift

        while [ "$1" ]; do
            case "$1" in
                *"'"*) : ;;
                *) _str="$_str '$1'"; printf " '%s'" "$1"; shift && continue ;;
            esac

            _str_ref="${1%%\'*}'\\''"
            __str="${_str_ref}${1#*\'}"

            while :; do case "$__str" in
                "$_str_ref"*"'"*)
                    __str="${__str#*"$_str_ref"}"
                    _str_ref="$_str_ref${__str%%\'*}'\\''"
                    __str="$_str_ref${__str#*\'}"
                ;;
                *)
                    break
                ;;
            esac done

            _str="$_str '$__str'"; printf " '%s'" "$__str"; shift
        done
    }

    # Description:
    # Signify invalid operand count (max)[X>X]
    #
    # Parameters:
    # <$1> - invalid count
    # [$2] - valid count
    #
    opd_cmax() {
        printf "%s: Too many operands: %s\n" "${0##*/}" "$1"

        [ "$2" ] && printf " > max allowed: %s\n" "$2"

        printf "%s: Try '%s --help' for more information.\n" \
               "${0##*/}" "${0##*/}"
    } 1>&2

    # Description:
    # Signify invalid operand count (max)[X>1]
    #
    # Parameters:
    # <"$1"> - first operand
    # <"$2"> - second operand
    # ["$3"] - the next practicable operand
    #
    opd_max() {
        if [ "$3" ]; then
            printf "%s: Too many operands: '[%s]; [%s]; ...'\n" \
                   "${0##*/}" "$1" "$2"
        else
            printf "%s: Too many operands: '[%s]; [%s]'\n" "${0##*/}" "$1" "$2"
        fi
        printf "%s: Try '%s --help' for more information.\n" \
               "${0##*/}" "${0##*/}"
    } 1>&2

    # Description:
    # Signify invalid operand count (min)[0>X]
    #
    opd_min() {
        printf "%s: No operand specified.\n" "${0##*/}"
        printf "%s: Try '%s --help' for more information.\n" \
               "${0##*/}" "${0##*/}"
    } 1>&2

    # Description:
    # Signify invalid option argument
    #
    # Parameters:
    # <"$1"> - option
    # <"$2"> - argument
    # ["$3"+] - valid arguments
    #
    opt_err() {
        printf "%s: Invalid argument '%s' for '%s'\n" \
               "${0##*/}" "$2" "$1"
        shift 2

        if [ "$1" ]; then
            echo "Valid arguments are:"

            while [ "$1" ]; do
                printf " > '%s'\n" "$1"; shift
            done
        fi

        printf "%s: Try '%s --help' for more information.\n" \
               "${0##*/}" "${0##*/}"
    } 1>&2

    # Description:
    # Signify invalid option
    #
    # Parameters:
    # <"$1"> - option
    #
    opt_invalid() {
        printf "%s: Invalid option: '%s'\n" "${0##*/}" "$1"
        printf "%s: Try '%s --help' for more information.\n" \
               "${0##*/}" "${0##*/}"
    } 1>&2

    # Description:
    # Signify unknown (*) option
    #
    # Parameters:
    # <"$1"> - option
    #
    opt_unknown() {
        printf "%s: Unknown option: '%s'\n" "${0##*/}" "$1"
        printf "%s: Try '%s --help' for more information.\n" \
               "${0##*/}" "${0##*/}"
    } 1>&2

    # Description:
    # Signify unrecognized ('--') option
    #
    # Parameters:
    # <"$1"> - option
    #
    opt_unrecognized() {
        printf "%s: Unrecognized option: '%s'\n" "${0##*/}" "$1"
        printf "%s: Try '%s --help' for more information.\n" \
               "${0##*/}" "${0##*/}"
    } 1>&2

    # Description:
    # True if specific complex (argument) option
    #
    # Parameters:
    # <"$1"+> - *
    #
    # Uses:
    # <_opt> $ - the first positional parameter of the main environment
    # <_opt_arg> $ - the second positional parameter of the main environment
    #
    # Provides:
    # <"$_opt_arg"> - the option argument
    # <"$_opt_match"> - the literal option matched
    # <$_shiftN> - the shift count
    #
    # Returns:
    # (0) match
    # (1) no match
    #
    scopt() {
        scopt_arg_invalid() {
            printf "%s: Invalid argument specification for: '%s'\n" \
                   "${0##*/}" "$1" 1>&2
            printf "%s: Try '%s --help' for more information.\n" \
                   "${0##*/}" "${0##*/}" 1>&2
        }
        scopt_arg_missing() {
            printf "%s: Option '%s' requires an argument.\n" \
                   "${0##*/}" "$1" 1>&2
            printf "%s: Try '%s --help' for more information.\n" \
                   "${0##*/}" "${0##*/}" 1>&2
        }

        [ "$_opt" ] || return 1

        while [ "$1" ]; do
            case "$_opt " in
                "$1"'= ')
                    scopt_arg_invalid "$1"
                    exit 2
                ;;
                "$1"'='*)
                    _opt_arg="${_opt#"$1"=}"; _opt=; _opt_match="$1"; _shiftN=1
                    return 0
                ;;
                "$1"' ')
                    [ "$_opt_arg" ] || { scopt_arg_missing "$1"; exit 2; }

                    _opt=; _opt_match="$1"; _shiftN=2
                    return 0
                ;;
            esac

            shift
        done

        return 1
    }

    # Description:
    # True if specific optional-complex (possible argument) option
    #
    # Parameters:
    # <"$1"+> - *
    #
    # Uses:
    # <_opt> $ - the first positional parameter of the main environment
    #
    # Provides:
    # <"$_opt_arg"> - the option argument
    # <"$_opt_match"> - the literal option matched
    # <$_shiftN> - the shift count
    #
    # Returns:
    # (0) match
    # (1) no match
    #
    scopt_optional() {
        scopt_arg_invalid() {
            printf "%s: Invalid argument specification for: '%s'\n" \
                   "${0##*/}" "$1" 1>&2
            printf "%s: Try '%s --help' for more information.\n" \
                   "${0##*/}" "${0##*/}" 1>&2
        }

        [ "$_opt" ] || return 1

        while [ "$1" ]; do
            case "$_opt" in
                "$1"'=')
                    scopt_arg_invalid "$1"
                    exit 2
                ;;
                "$1"'='*)
                    _opt_arg="${_opt#"$1"=}"; _opt=; _opt_match="$1"; _shiftN=1
                    return 0
                ;;
                "$1")
                    _opt=; _opt_arg=; _opt_match="$1"; _shiftN=1
                    return 0
                ;;
            esac

            shift
        done

        return 1
    }

    # Description:
    # True if simple (no argument) option
    #
    # Parameters (<1+>):
    # ["$1"] - -*
    # ["$2"] - --*
    #
    # Uses:
    # <_opt> $ - the first positional parameter of the main environment
    #
    # Provides:
    # <"$_opt_match"> - the literal option matched
    # <$_shiftN> - the shift count
    # ["$_sopt_index"] - an index with encountered short options
    #
    # Returns:
    # (0) match
    # (1) no match
    #
    sopt() {
        [ "$_opt" ] || return 1

        case "$_opt" in
            '--'*)
                case "$1$2" in
                    '--'*) : ;;
                    "$1"'--'*) set -- "$2" ;;
                    *) return 1 ;;
                esac

                case "$_opt" in
                    "$1")
                        _opt=; _opt_match="$1"; _shiftN=1
                        return 0
                    ;;
                esac
            ;;
            '-'*)
                case "$1$2" in
                    '-'*) : ;;
                    *) return 1 ;;
                esac

                case "$_opt" in
                    "$1"*)
                        case :"$_sopt_index" in
                            :) _sopt_index="${1#?}" ;;
                            *) _sopt_index="$_sopt_index${1#?}" ;;
                        esac

                        _opt="-${_opt#??}"; _opt_match="$1"; _shiftN=1
                        return 0
                    ;;
                esac
            ;;
        esac

        return 1
    }

    # Description:
    # True if specific simple (no argument) option
    #
    # Parameters:
    # <"$1"+> - *
    #
    # Uses:
    # <_opt> $ - the first positional parameter of the main environment
    #
    # Provides:
    # <"$_opt_match"> - the literal option matched
    # <$_shiftN> - the shift count
    #
    # Returns:
    # (0) match
    # (1) no match
    #
    ssopt() {
        [ "$_opt" ] || return 1

        while [ "$1" ]; do
            case "$_opt" in
                "$1")
                    _opt=; _opt_match="$1"; _shiftN=1
                    return 0
                ;;
            esac

            shift
        done

        return 1
    }
}

# Description:
# Parse utility options
#
# Uses:
# <_opt> $ - {state - anything}; [iteration - X]
#
# Returns:
# (0) $_opt has been parsed
# (1) $_opt is not an option
#
options() {
    _opt_fail() { opt_err "$_opt_match" "$_opt_arg" "$@"; exit 2; }

    unset _sopt_index

    case "$_opt" in
        '-'*)
            sopt '--no-color' && { ncolor=1; }
            copt '--language' && { language="$_opt_arg"; }
            copt '--locale' && { locale="$_opt_arg"; }

            sopt '-c' '--check' && { op=CHECK; }

            copt '-l' '--location' && { {
                assert 6 "$_opt_arg" && \
                get_fpath "$_opt_arg" 0 && \
                location="$_path"
            } || _opt_fail; }
            copt '-s' '--size' && {
                size="$_opt_arg"
            }
            copt '-S' '--swappiness' && { {
                assert 2 "$_opt_arg" && \
                [ "$_opt_arg" -le 200 ] && \
                swappiness="$_opt_arg"
            } || _opt_fail; }
            copt '-v' '--vfs-cache-pressure' && { {
                assert 2 "$_opt_arg" && \
                [ "$_opt_arg" -le 2147483647 ] && \
                vfscp="$_opt_arg"
            } || _opt_fail; }
        ;;
    esac

    [ "$_opt" ] || return 0

    case "$_opt" in
        '--'*)
            opt_unrecognized "$_opt"; exit 2
        ;;
        '-'*)
            case :"$_sopt_index" in
                :) opt_invalid "${_opt%"${_opt#??}"}"; exit 2 ;;
            esac

            case ${#_opt} in
                1) unset _opt _sopt_index; return 0 ;;
            esac

            options;
        ;;
    esac

    return 1
}

main() {
    # Source common functions
    main_functions;

    # Parse options
    while [ "$1" ]; do
        # Simulate global $N (positional parameters) shift
        #  > option functions modify when appropriate
        _shiftN=1

        # Simulate global $1/$2 (option/argument) handling
        #  > option functions modify when appropriate
        _opt="$1"; _opt_arg="$2"

        # Parse standard options
        #  > required to parse them first
        ssopt '-' && { opt_invalid "$1"; exit 2; }
        ssopt '--' && { opt_invalid "$1"; exit 2; }
        ssopt '--help' && { usage; exit 0; }
        ssopt '--version' && { version; exit 0; }

        # Parse utility options
        #  > rc 1 if $_opt is not a valid option
        options || {
            opt_unknown "$_opt"; exit 2
        }

        # Move on positional parameters
        #  > either with default value or with option value
        shift "$_shiftN"
    done

    # Core operations
    if [ "$op" = CHECK ]; then
        _fswap; fswap_env; fswap_check;
    else
        fswap;
    fi

    # Check if RC is set, otherwise explicit success
    [ "$RC" ] && return "$RC" || return 0
}

main "$@"
