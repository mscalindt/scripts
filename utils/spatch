#!/bin/sh
# SPDX-License-Identifier: GPL-3.0-only
# shellcheck disable=SC2030 # ShellCheck is wrong (on the intention)
# shellcheck disable=SC2031 # ShellCheck wrong parse order
# shellcheck disable=SC2048 # ShellCheck incorrect pedantic warning

_copyright() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'COPYRIGHT'
Copyright (C) 2020-2022 Dimitar Yurukov <mscalindt@protonmail.com>
COPYRIGHT
}

_description() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'DESCRIPTION'
Sort commit/patch URLs by date.
DESCRIPTION
}

_license() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'LICENSE'
License GPLv3: GNU GPL version 3
LICENSE
}

_misc() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'MISC'
The sort output, when '-o'/'--output' is not given, is written in the output;
if file descriptor 3 is open, the sort output will be written there as well.

External utilities hard dependency list:
curl, rm, sort.
External utilities soft dependency list:
awk, date.
MISC
}

_notice() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'NOTICE'
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
NOTICE
}

_options() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'OPTIONS'
Options:
  -d, --direct-url           assume URLs are valid patch links even if they do
                             not end with .patch
  -i, --invert-sort          sort from newest to oldest
  -l, --line-numbers         append line numbers to the sort output
  -o, --output <PATH>        PATH is an absolute or relative location to which
                             the sort output shall be written; if the parent
                             does not exist, output will be written to stdout
  -p, --preserve-url         preserve the URLs
  -s, --short-commit         print a shorter SHA-1 (12 characters) of the
                             commits
  -t, --timestamp            append timestamp to the sort output
  -v, --verbose              show additional information unrelated to the sort
                             output
      --language <LANG>      custom LANG for LANG
      --locale <LANG>        custom LANG for LC_ALL
      --no-color             colorless output on all streams
      --help     display this help text and exit
      --version  display version information and exit
      --         specify end of options
OPTIONS
}

_usage() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'USAGE'
Usage: spatch [options] [--] FILE
USAGE
}

_version() {
    while IFS= read -r LINE; do printf "%s\n" "$LINE"; done \
<<'VERSION'
spatch 0.0.0
VERSION
}

usage() {
    _usage; _description; echo
    _options; echo
    _misc;
}

version() {
    _version; echo
    _copyright; echo
    _license; _notice;
}

# Description:
# Print error and exit
#
# Parameters:
# <$1> - exit code
# <"$2"+> - text
#
err() {
    _rc="$1"; shift
    printf "ERROR: %s\n" "$*" 1>&2
    exit "$_rc"
}

# Description:
# Colorfully print error and exit
#
# Parameters:
# <$1> - exit code
# <"$2"+> - text
#
err_clr() {
    _rc="$1"; shift
    printf "%bERROR:%b %s\n" "\033[1;31m" "\033[0m" "$*" 1>&2
    exit "$_rc"
}

# Description:
# Count files and directories in a directory
#
# Parameters:
# <"$1"> - directory
# ["$2"] - mode0-2("0X" - count files and directories ending with "X",
#                  '1' - count only files,
#                  "1X" - count only files ending with "X",
#                  '2' - count only directories,
#                  "2X" - count only directories ending with "X")
# [$3] - mode3('3' - exclude hidden files/directories)
# [$4] - mode4('4' - no output)
#
# Provides:
# (0) <$_count> - the count
#
# Returns:
# (0) count
# (1) not a directory | directory does not exist
#
# Caveats:
# 1. The number of files/directories the function (i.e. system) can process
#    varies. The files/directories are stored as arguments, which means that the
#    amount of things that can be processed depends on the system and version,
#    on the number of files and their respective argument size, and on the
#    number and size of environment variable names. For more information,
#    related limits shall be checked: ARG_MAX.
#    Fix: none; not applicable.
#
fcount() {
    fcount_all() {
        _fcount=0

        if [ "$_sfix" ]; then
            set -- "$_dir"/*"$_sfix"
            [ -e "$1" ] && _fcount=$#

            set -- "$_dir"/.*"$_sfix"
            case "$_sfix" in
                '.')
                    [ "$#" -ge 2 ] && _fcount=$((_fcount + $# - 1))
                ;;
                *)
                    [ -e "$1" ] && _fcount=$((_fcount + $#))
                ;;
            esac
        else
            set -- "$_dir"/*
            [ -e "$1" ] && _fcount=$#

            set -- "$_dir"/.*
            [ "$#" -ge 3 ] && _fcount=$((_fcount + $# - 2))
        fi
    }
    fcount_dotdirs() {
        _fcount=0

        if [ "$_sfix" ]; then
            set -- "$_dir"/.*"$_sfix"/
            case "$_sfix" in
                '.')
                    [ "$#" -ge 2 ] && _fcount=$(($# - 1))
                ;;
                *)
                    [ -e "$1" ] && _fcount=$#
                ;;
            esac
        else
            set -- "$_dir"/.*/
            [ "$#" -ge 3 ] && _fcount=$(($# - 2))
        fi
    }
    fcount_dotfiles() {
        _fcount=0

        if [ "$_sfix" ]; then
            set -- "$_dir"/.*"$_sfix"
            case "$_sfix" in
                '.')
                    [ "$#" -ge 2 ] && _fcount=$((_fcount + $# - 1))
                ;;
                *)
                    [ -e "$1" ] && _fcount=$((_fcount + $#))
                ;;
            esac

            set -- "$_dir"/.*"$_sfix"/
            case "$_sfix" in
                '.')
                    [ "$#" -ge 2 ] && _fcount=$((_fcount - $# + 1))
                ;;
                *)
                    [ -e "$1" ] && _fcount=$((_fcount - $#))
                ;;
            esac
        else
            set -- "$_dir"/.*
            [ "$#" -ge 3 ] && _fcount=$(($# - 2))

            set -- "$_dir"/.*/
            [ "$#" -ge 3 ] && _fcount=$((_fcount - $# + 2))
        fi
    }
    fcount_dirs() {
        _fcount=0

        if [ "$_sfix" ]; then
            set -- "$_dir"/*"$_sfix"/
        else
            set -- "$_dir"/*/
        fi
        [ -e "$1" ] && _fcount=$#
    }
    fcount_files() {
        _fcount=0

        if [ "$_sfix" ]; then
            set -- "$_dir"/*"$_sfix"
            [ -e "$1" ] && _fcount=$#

            set -- "$_dir"/*"$_sfix"/
            [ -e "$1" ] && _fcount=$((_fcount - $#))
        else
            set -- "$_dir"/*
            [ -e "$1" ] && _fcount=$#

            set -- "$_dir"/*/
            [ -e "$1" ] && _fcount=$((_fcount - $#))
        fi
    }

    [ -d "$1" ] || return 1

    _count=0
    case "$1" in
        *'/') _dir="${1%?}" ;;
        *) _dir="$1" ;;
    esac
    case "$2" in
        0*|1*|2*) _sfix="${2#?}" ;;
        *) _sfix= ;;
    esac

    case $3:"$2" in
        3:2*)
            fcount_dirs; _count=$_fcount
        ;;
        3:1*)
            fcount_files; _count=$_fcount
        ;;
        3:0*|"$3":3)
            fcount_files; _count=$_fcount
            fcount_dirs; _count=$((_count + $_fcount))
        ;;
        "$3":2*)
            fcount_dirs; _count=$_fcount
            fcount_dotdirs; _count=$((_count + $_fcount))
        ;;
        "$3":1*)
            fcount_files; _count=$_fcount
            fcount_dotfiles; _count=$((_count + $_fcount))
        ;;
        *)
            fcount_all; _count=$_fcount
        ;;
    esac

    case $4:$3:"$2" in
        4*|"$4":4*|"$4":"$3":4) : ;;
        *) printf "%d" "$_count" ;;
    esac
}

# Description:
# Convert relative path to absolute path
#
# Parameters:
# <"$1"> - path
# [$2] - mode0('0' - no output)
#
# Provides:
# <"$_path"> - the absolute path | path
#
# Returns:
# (0) absolute $1 | $1
#
get_fpath() {
    case "$1" in
        '/'*) _path="$1" ;;
        *) _path="$PWD/$1" ;;
    esac

    [ ! "$2" ] && printf "%s" "$_path"
}

# Description:
# Print info
#
# Parameters:
# <"$1"+> - text
#
# Returns:
# (0) info-formatted $1
#
info() {
    printf "INFO: %s\n" "$*"
}

# Description:
# Colorfully print info
#
# Parameters:
# <"$1"+> - text
#
# Returns:
# (0) info-formatted $1
#
info_clr() {
    printf "%bINFO:%b %s\n" "\033[1;37m" "\033[0m" "$*"
}

# Description:
# Get positional substring, (from&to LTL) (N)character(s), in a string
#
# Parameters:
# <$1> - from "N" LTR character('0' - max)
# <"$2"> - from "X" character(s)
# <$3> - to "N" $2-TL character('0' - max)
# <"$4"> - to "X" character(s)
# <"$5"> - string
# [$6] - mode0-2('0' - strip all leading whitespace characters,
#                '1' - strip all trailing whitespace characters,
#                '2' - strip all leading/trailing whitespace characters)
# [$7] - mode3-5('3' - keep $2,
#                '4' - keep $4,
#                '5' - keep $2/$4)
# [$8] - mode6('6' - verify the expansion)
# [$9] - mode7('7' - no output)
#
# Provides:
# (0) <"$_str"> - the modified string
# [$_i] - the iterations completed;
#         whole number
#
# Returns:
# (0) substring | incorrect substring ($1/$3 > $2/$4)
# (1) empty <unspecified/incorrect> expansion
# (2) unspecified <empty/incorrect> expansion
# (255) bad input
#
# Returns (mode '6'):
# (0) substring
# (1) unspecified expansion ($2 is the first character by the given ruleset)
# (2) unspecified expansion (! $2)
# (3) incorrect expansion ($1 > $2)
# (4) empty expansion ($2..$4)
# (5) unspecified expansion (! $4)
# (6) incorrect expansion ($3 > $4)
# (255) bad input
#
ltl_substr1() {
    case :$1${1#*[!0123456789]} in
        :) return 255 ;;
        :00) : ;;
        :0*) return 255 ;;
        :"$1$1") : ;;
        *) return 255 ;;
    esac

    case :$3${3#*[!0123456789]} in
        :) return 255 ;;
        :00) : ;;
        :0*) return 255 ;;
        :"$3$3") : ;;
        *) return 255 ;;
    esac

    _str="$5"

    case $8$7$6 in
        *6*)
            case $1 in
                0)
                    case "$_str" in
                        *"$2"*"$2"*) : ;;
                        "$2"*) return 1 ;;
                        *"$2"*) : ;;
                        *) return 2 ;;
                    esac

                    _str="${_str%"$2"*}"
                ;;
                *)
                    case $1:"$_str" in
                        1:"$2"*) return 1 ;;
                        "$1":*"$2"*) : ;;
                        *) return 2 ;;
                    esac

                    _sfix="$_str"; _i=0; until [ "$_i" -eq "$1" ]; do
                        _sfix="${_sfix#*"$2"}"

                        case "$_sfix" in
                            *"$2"*) : ;;
                            *) [ "$((_i + 1))" -eq "$1" ] || return 3 ;;
                        esac

                        _i=$((_i + 1))
                    done

                    _str="${_str%"$2$_sfix"}"
                ;;
            esac

            case $3 in
                0)
                    case "$_str" in
                        *"$4"*"$4"*) : ;;
                        *"$4") return 4 ;;
                        *"$4"*) : ;;
                        *) return 5 ;;
                    esac

                    _str="${_str#*"$4"}"
                ;;
                *)
                    case $3:"$_str" in
                        1:*"$4") return 4 ;;
                        "$3":*"$4"*) : ;;
                        *) return 5 ;;
                    esac

                    _pfix="$_str"; _i=0; until [ "$_i" -eq "$3" ]; do
                        _pfix="${_pfix%"$4"*}"

                        case "$_pfix" in
                            *"$4"*) : ;;
                            *) [ "$((_i + 1))" -eq "$3" ] || return 6 ;;
                        esac

                        _i=$((_i + 1))
                    done

                    _str="${_str#"$_pfix$4"}"
                ;;
            esac
        ;;
        *)
            case $1 in
                0)
                    _str="${_str%"$2"*}"
                ;;
                *)
                    _sfix="$_str"; _i=0; until [ "$_i" -eq "$1" ]; do
                        _sfix="${_sfix#*"$2"}"
                        _i=$((_i + 1))
                    done

                    _str="${_str%"$2$_sfix"}"
                ;;
            esac

            [ "$_str" = "$5" ] && return 2
            _old_str="$_str"

            case $3 in
                0)
                    _str="${_str#*"$4"}"
                ;;
                *)
                    _pfix="$_str"; _i=0; until [ "$_i" -eq "$3" ]; do
                        _pfix="${_pfix%"$4"*}"
                        _i=$((_i + 1))
                    done

                    _str="${_str#"$_pfix$4"}"
                ;;
            esac

            [ "$_str" = "$_old_str" ] && return 2
        ;;
    esac

    [ "$_str" ] || return 1

    case $6 in
        0)
            _str="${_str#"${_str%%[![:space:]]*}"}"
        ;;
        1)
            _str="${_str%"${_str##*[![:space:]]}"}"
        ;;
        2)
            _str="${_str#"${_str%%[![:space:]]*}"}"
            _str="${_str%"${_str##*[![:space:]]}"}"
        ;;
    esac

    case $7$6 in
        *3*) _str="$_str$2" ;;
        *4*) _str="$4$_str" ;;
        *5*) _str="$4$_str$2" ;;
    esac

    case $9$8$7$6 in
        *7*) : ;;
        *) printf "%s" "$_str" ;;
    esac
}

# Description:
# Get positional substring, (from&to LTR) (N)character(s), in a string
#
# Parameters:
# <$1> - from "N" LTR character('0' - max)
# <"$2"> - from "X" character(s)
# <$3> - to "N" $2-TR character('0' - max)
# <"$4"> - to "X" character(s)
# <"$5"> - string
# [$6] - mode0-2('0' - strip all leading whitespace characters,
#                '1' - strip all trailing whitespace characters,
#                '2' - strip all leading/trailing whitespace characters)
# [$7] - mode3-5('3' - keep $2,
#                '4' - keep $4,
#                '5' - keep $2/$4)
# [$8] - mode6('6' - verify the expansion)
# [$9] - mode7('7' - no output)
#
# Provides:
# (0) <"$_str"> - the modified string
# [$_i] - the iterations completed;
#         whole number
#
# Returns:
# (0) substring | incorrect substring ($1/$3 > $2/$4)
# (1) empty <unspecified/incorrect> expansion
# (2) unspecified <empty/incorrect> expansion
# (255) bad input
#
# Returns (mode '6'):
# (0) substring
# (1) unspecified expansion ($2 is the last character by the given ruleset)
# (2) unspecified expansion (! $2)
# (3) incorrect expansion ($1 > $2)
# (4) empty expansion ($2..$4)
# (5) unspecified expansion (! $4)
# (6) incorrect expansion ($3 > $4)
# (255) bad input
#
ltr_substr1() {
    case :$1${1#*[!0123456789]} in
        :) return 255 ;;
        :00) : ;;
        :0*) return 255 ;;
        :"$1$1") : ;;
        *) return 255 ;;
    esac

    case :$3${3#*[!0123456789]} in
        :) return 255 ;;
        :00) : ;;
        :0*) return 255 ;;
        :"$3$3") : ;;
        *) return 255 ;;
    esac

    _str="$5"

    case $8$7$6 in
        *6*)
            case $1 in
                0)
                    case "$_str" in
                        *"$2") return 1 ;;
                        *"$2"*) : ;;
                        *) return 2 ;;
                    esac

                    _str="${_str##*"$2"}"
                ;;
                *)
                    case $1:"$_str" in
                        "$1":*"$2"*"$2"*) : ;;
                        1:*"$2") return 1 ;;
                        "$1":*"$2"*) : ;;
                        *) return 2 ;;
                    esac

                    _i=0; until [ "$_i" -eq "$1" ]; do
                        _str="${_str#*"$2"}"

                        case "$_str" in
                            *"$2"*"$2"*) : ;;
                            *"$2") [ "$((_i + 2))" -eq "$1" ] && return 1 ;;
                            *"$2"*) : ;;
                            *) [ "$((_i + 1))" -eq "$1" ] || return 3 ;;
                        esac

                        _i=$((_i + 1))
                    done
                ;;
            esac

            case $3 in
                0)
                    case "$_str" in
                        *"$4"*"$4"*) : ;;
                        "$4"*) return 4 ;;
                        *"$4"*) : ;;
                        *) return 5 ;;
                    esac

                    _str="${_str%"$4"*}"
                ;;
                *)
                    case $3:"$_str" in
                        1:"$4"*) return 4 ;;
                        "$3":*"$4"*) : ;;
                        *) return 5 ;;
                    esac

                    _sfix="$_str"; _i=0; until [ "$_i" -eq "$3" ]; do
                        _sfix="${_sfix#*"$4"}"

                        case "$_sfix" in
                            *"$4"*) : ;;
                            *) [ "$((_i + 1))" -eq "$3" ] || return 6 ;;
                        esac

                        _i=$((_i + 1))
                    done

                    _str="${_str%"$4$_sfix"}"
                ;;
            esac
        ;;
        *)
            case $1 in
                0)
                    _str="${_str##*"$2"}"
                ;;
                *)
                    _i=0; until [ "$_i" -eq "$1" ]; do
                        _str="${_str#*"$2"}"
                        _i=$((_i + 1))
                    done
                ;;
            esac

            [ "$_str" = "$5" ] && return 2
            _old_str="$_str"

            case $3 in
                0)
                    _str="${_str%"$4"*}"
                ;;
                *)
                    _sfix="$_str"; _i=0; until [ "$_i" -eq "$3" ]; do
                        _sfix="${_sfix#*"$4"}"
                        _i=$((_i + 1))
                    done

                    _str="${_str%"$4$_sfix"}"
                ;;
            esac

            [ "$_str" = "$_old_str" ] && return 2
        ;;
    esac

    [ "$_str" ] || return 1

    case $6 in
        0)
            _str="${_str#"${_str%%[![:space:]]*}"}"
        ;;
        1)
            _str="${_str%"${_str##*[![:space:]]}"}"
        ;;
        2)
            _str="${_str#"${_str%%[![:space:]]*}"}"
            _str="${_str%"${_str##*[![:space:]]}"}"
        ;;
    esac

    case $7$6 in
        *3*) _str="$2$_str" ;;
        *4*) _str="$_str$4" ;;
        *5*) _str="$2$_str$4" ;;
    esac

    case $9$8$7$6 in
        *7*) : ;;
        *) printf "%s" "$_str" ;;
    esac
}

# Description:
# Parse the content of a file
#
# Parameters:
# <"$1"> - file
# [$2] - mode1-4('1' - add one leading/trailing whitespace character,
#                '2' - add two leading/trailing whitespace characters,
#                '3' - skip empty lines,
#                '4' - strip trailing/leading whitespace characters)
# ["$3"] - mode5("5 N" - stop parsing further than "N" line)
#
# Returns:
# (0) output | empty output (file) | empty output (by the given ruleset)
# (1) not a file | file does not exist
# (2) file access error
#
# Caveats:
# 1. NULL character.
# 2. Reading /proc is unreliable.
#
parse() {
    [ -f "$1" ] || return 1
    [ -r "$1" ] || return 2

    case $3:$2 in
        :1)
            while IFS= read -r _line; do
                printf " %s \n" "$_line"
            done < "$1"
        ;;
        :2)
            while IFS= read -r _line; do
                printf "  %s  \n" "$_line"
            done < "$1"
        ;;
        :3)
            while IFS= read -r _line; do
                case ":$_line" in :) : ;; *) printf "%s\n" "$_line" ;; esac
            done < "$1"
        ;;
        :4)
            while read -r _line; do
                printf "%s\n" "$_line"
            done < "$1"
        ;;
        :5*)
            _maxN="${2#??}"; _i=0; while IFS= read -r _line; do
                _i=$((_i + 1))
                case $_i in "$_maxN") break ;; esac
                printf "%s\n" "$_line"
            done < "$1"
        ;;
        5*:1)
            _maxN="${3#??}"; _i=0; while IFS= read -r _line; do
                _i=$((_i + 1))
                case $_i in "$_maxN") break ;; esac
                printf " %s \n" "$_line"
            done < "$1"
        ;;
        5*:2)
            _maxN="${3#??}"; _i=0; while IFS= read -r _line; do
                _i=$((_i + 1))
                case $_i in "$_maxN") break ;; esac
                printf "  %s  \n" "$_line"
            done < "$1"
        ;;
        5*:3)
            _maxN="${3#??}"; _i=0; while IFS= read -r _line; do
                _i=$((_i + 1))
                case $_i in "$_maxN") break ;; esac
                case ":$_line" in :) : ;; *) printf "%s\n" "$_line" ;; esac
            done < "$1"
        ;;
        5*:4)
            _maxN="${3#??}"; _i=0; while read -r _line; do
                _i=$((_i + 1))
                case $_i in "$_maxN") break ;; esac
                printf "%s\n" "$_line"
            done < "$1"
        ;;
        *)
            while IFS= read -r _line; do
                printf "%s\n" "$_line"
            done < "$1"
        ;;
    esac

    case $3:$2 in
        :3|:4|:5*|5*:3|5*:4)
            printf "%s" "$_line"
        ;;
        :1|5*:1)
            [ "$_line" ] && printf " %s " "$_line"
        ;;
        :2|5*:2)
            [ "$_line" ] && printf "  %s  " "$_line"
        ;;
        *)
            printf "%s" "$_line"
        ;;
    esac
}

# Description:
# Print specific line in file
#
# Parameters:
# <$1> - line number
# <"$2"> - file
# [$3] - mode0('0' - no output)
#
# Provides:
# (0) <"$_line"> - the line
#
# Returns:
# (0) line's content | line empty
# (1) line does not exist
# (2) not a file | file does not exist
# (3) file access error
#
# Caveats:
# 1. NULL character.
# 2. Reading /proc is unreliable.
#
pline() {
    [ -f "$2" ] || return 2
    [ -r "$2" ] || return 3

    _i=0; while read -r _line || [ "$_line" ]; do
        _i=$((_i + 1))
        case $_i in "$1") [ ! "$3" ] && printf "%s" "$_line"; return 0 ;; esac
    done < "$2"

    return 1
}

# Description:
# Check the existence/position of a substring in string
#
# Parameters:
# <"$1"> - substring
# <"$2"> - string
# [$3] - mode1-3('1' - $1 is first character(s) of $2,
#                '2' - $1 is last character(s) of $2,
#                '3' - $1 is, on its own, $2)
#
# Returns:
# (0) match
# (1) no match
#
str() {
    case $3:"$2" in
        1:"$1"*) return 0 ;;
        2:*"$1") return 0 ;;
        3:"$1") return 0 ;;
        :*"$1"*) return 0 ;;
    esac

    return 1
}

# Description:
# Print a warning
#
# Parameters:
# <"$1"+> - text
#
# Returns:
# (0) warning-formatted $1
#
warn() {
    printf "WARNING: %s\n" "$*"
}

# Description:
# Colorfully print a warning
#
# Parameters:
# <"$1"+> - text
#
# Returns:
# (0) warning-formatted $1
#
warn_clr() {
    printf "%bWARNING:%b %s\n" "\033[1;33m" "\033[0m" "$*"
}

# Description:
# Save URL content as a file in $PWD
#
# Parameters:
# <"$1"+> - URL
#
# Uses:
# <"$@"> - {state - URL(s)}; []
# <err> ()
#
_get_url() {
    if command -v curl > /dev/null 2>&1; then
        set -- 'curl' '-Of' "$@"
    elif command -v wget > /dev/null 2>&1; then
        set -- 'wget' "$@"
    else
        err 127 'No URL download tool available. (curl/wget)'
    fi

    "$@" > /dev/null 2>&1 &
}

_spatch() {
    case :"$ncolor$NO_COLOR" in
        :)
            err() { err_clr "$@"; }
            info() { info_clr "$@"; }
            warn() { warn_clr "$@"; }

            [ "$NO_COLOR" ] && export NO_COLOR=
        ;;
    esac

    case :"$locale" in
        :)
            LCgo() {
                agj5k97oN05exMQq="$LC_ALL"
                export LC_ALL=C
            }
        ;;
        *)
            LCgo() {
                agj5k97oN05exMQq="$LC_ALL"
                export LC_ALL="$locale"
            }
        ;;
    esac
    LCstop() { export LC_ALL="$agj5k97oN05exMQq"; }
    LCreset() { LCstop; LCgo; }

    case :"$language" in
        :)
            LANGgo() {
                WIxPdnq3AX2uzCuR="$LANG"
                export LANG=C
            }
        ;;
        *)
            LANGgo() {
                WIxPdnq3AX2uzCuR="$LANG"
                export LANG="$language"
            }
        ;;
    esac
    LANGstop() { export LANG="$WIxPdnq3AX2uzCuR"; }
    LANGreset() { LANGstop; LANGgo; }

    LCgo; LANGgo;
}

spatch_env() {
    FILE="$1"
}

spatch_check() {
    [ -f "$FILE" ] || err 2 "'$FILE' is not a file."
}

spatch_work() {
    rm -f "${TMPDIR:-/tmp}"/*.patch
    cd "${TMPDIR:-/tmp}" || err 1 "Line '$LINENO' failed."
}

spatch_exec() {
    while read -r LINE || [ "$LINE" ]; do
        if ! str '://' " $LINE "; then
            if [ "$LINE" ] && [ "$verbose" ]; then
                warn "'$LINE' has no URL. (*://*)"
            fi
            continue
        fi

        LINE=$(
            ltl_substr1 0 '://' 1 ' ' " $LINE" 3
            ltr_substr1 0 '://' 1 ' ' "$LINE "
        )

        if [ -z "$durl" ]; then
            str '.patch' "$LINE" || LINE="$LINE".patch
        fi

        if [ "$verbose" ]; then
            NUM=$((1 + CNT)); CNT=$NUM
            info "URL ($NUM): '$LINE'."
        fi

        _get_url "$LINE"
    done < "$FILE"; wait; [ "$verbose" ] && unset CNT

    case $(fcount "${TMPDIR:-/tmp}" '1.patch' 3) in
        0) spatch_post; err 1 'No patches found.' ;;
    esac

    [ "$purl" ] && SFILE=$(parse "$FILE" 1)
    SFILE=$(
        for PATCH in "${TMPDIR:-/tmp}"/*.patch; do
            CSTR=$(pline 1 "$PATCH")
            CSTR=$(ltr_substr1 1 ' ' 1 ' ' "$CSTR")

            [ "$scommit" ] && CSTR="${CSTR%????????????????????????????}"

            DSTR=$(pline 3 "$PATCH")
            DSTR=$(ltr_substr1 2 ' ' 4 ' ' "$DSTR")

            [ "$purl" ] && CSTR=$(ltl_substr1 0 "$CSTR" 1 ' ' "$SFILE" 3)

            echo "$CSTR $DSTR"
        done
    )

    SFILE=$(
        echo "$SFILE" | sort -t ' ' -k4.1,4.4 -k3.1,3.3M -k2.1n \
                                    -k5.1,5.2 -k5.4,5.5 -k5.7,5.8
    )

    if [ "$invert" ]; then
        SFILE=$(
            echo "$SFILE" | \
            awk '{a[i++]=$0;} END {for (j=i-1; j>=0;) print a[j--];}'
        )
    fi

    if [ "$lnumbers" ]; then
        SFILE=$(
            echo "$SFILE" | \
            while read -r LINE; do
                NUM=$((1 + CNT)); CNT=$NUM
                echo "$NUM - $LINE"
            done
        )
    fi

    if [ "$tstamp" ]; then
        SFILE=$(
            printf "%s\nTIMESTAMP: %s\n" "$SFILE" "$(date '+%b %-e, %T %:z %Y')"
        )
    fi

    if [ "$tfile" ]; then
        if [ -d "${tfile%/*}" ]; then
            echo "$SFILE" 2> /dev/null > "$tfile" || {
                warn "Error code $? while trying to write output to '$tfile'."
                echo "$SFILE"
            }
        else
            warn "'${tfile%/*}' is not a valid directory."
            echo "$SFILE"
        fi
    else
        echo "$SFILE"
    fi

    if { >&3; } 2> /dev/null; then
        echo "$SFILE" 1>&3
    fi
}

spatch_post() {
    rm -f "${TMPDIR:-/tmp}"/*.patch
}

spatch() {
    _spatch
    spatch_env "$1"
    spatch_check
    spatch_work
    spatch_exec
    spatch_post
}

main_functions() {
    # Description:
    # Assert a string
    #
    # Parameters:
    # <$1> - mode1-3('1' - N [0,1,00,01...],
    #                '2' - whole N [0,1...],
    #                '3' - natural N [1...],
    #                '4' - absolute path,
    #                '5' - relative path,
    #                '6' - valid path)
    # <"$2"> - string
    #
    # Returns:
    # (0) true
    # (1) false
    #
    assert() {
        case $1 in
            1)
                case :"$2${2#*[!0123456789]}" in
                    :) return 1 ;;
                    :"$2$2") : ;;
                    *) return 1 ;;
                esac
            ;;
            2)
                case :"$2${2#*[!0123456789]}" in
                    :) return 1 ;;
                    :00) : ;;
                    :0*) return 1 ;;
                    :"$2$2") : ;;
                    *) return 1 ;;
                esac
            ;;
            3)
                case :"$2${2#*[!0123456789]}" in
                    : | :0*) return 1 ;;
                    :"$2$2") : ;;
                    *) return 1 ;;
                esac
            ;;
            4)
                case "$2" in
                    *'//'*) return 1 ;;
                    '/'*) : ;;
                    *) return 1 ;;
                esac
            ;;
            5)
                case "$2" in
                    *'//'* | '/'*) return 1 ;;
                esac
            ;;
            6)
                case "$2" in
                    *'//'*) return 1 ;;
                esac
            ;;
        esac
    }

    # Description:
    # True if complex (argument) option
    #
    # Parameters (<1+>):
    # ["$1"] - -*
    # ["$2"] - --*
    #
    # Uses:
    # <_opt> $ - the first positional parameter of the main environment
    # <_opt_arg> $ - the second positional parameter of the main environment
    #
    # Provides:
    # <"$_opt_arg"> - the option argument
    # <"$_opt_match"> - the literal option matched
    # <$_shiftN> - the shift count
    #
    # Returns:
    # (0) match
    # (1) no match
    #
    copt() {
        copt_arg_invalid() {
            printf "%s: Invalid argument specification for: '%s'\n" \
                   "${0##*/}" "$1" 1>&2
            printf "%s: Try '%s --help' for more information.\n" \
                   "${0##*/}" "${0##*/}" 1>&2
        }
        copt_arg_missing() {
            printf "%s: Option '%s' requires an argument.\n" \
                   "${0##*/}" "$1" 1>&2
            printf "%s: Try '%s --help' for more information.\n" \
                   "${0##*/}" "${0##*/}" 1>&2
        }

        [ "$_opt" ] || return 1

        case "$_opt" in
            '--'*)
                case "$1$2" in
                    '--'*) : ;;
                    "$1"'--'*) set -- "$2" ;;
                    *) return 1 ;;
                esac

                case "$_opt " in
                    "$1"'= ')
                        copt_arg_invalid "$1"
                        exit 2
                    ;;
                    "$1"'='*)
                        _opt_arg="${_opt#"$1"=}"; _opt=; _opt_match="$1"; \
                        _shiftN=1
                        return 0
                    ;;
                    "$1"' ')
                        [ "$_opt_arg" ] || { copt_arg_missing "$1"; exit 2; }

                        _opt=; _opt_match="$1"; _shiftN=2
                        return 0
                    ;;
                esac
            ;;
            '-'*)
                case "$1$2" in
                    '-'*) : ;;
                    *) return 1 ;;
                esac

                case "$_opt " in
                    "$1"' ')
                        [ "$_opt_arg" ] || { copt_arg_missing "$1"; exit 2; }

                        _opt=; _opt_match="$1"; _shiftN=2
                        return 0
                    ;;
                    "$1"*)
                        _opt_arg="${_opt#"$1"}"; _opt=; _opt_match="$1"; \
                        _shiftN=1
                        return 0
                    ;;
                esac
            ;;
        esac

        return 1
    }

    # Description:
    # True if optional-complex (possible argument) option
    #
    # Parameters (<1+>):
    # ["$1"] - -*
    # ["$2"] - --*
    #
    # Uses:
    # <_opt> $ - the first positional parameter of the main environment
    #
    # Provides:
    # <"$_opt_arg"> - the option argument
    # <"$_opt_match"> - the literal option matched
    # <$_shiftN> - the shift count
    #
    # Returns:
    # (0) match
    # (1) no match
    #
    copt_optional() {
        copt_arg_invalid() {
            printf "%s: Invalid argument specification for: '%s'\n" \
                   "${0##*/}" "$1" 1>&2
            printf "%s: Try '%s --help' for more information.\n" \
                   "${0##*/}" "${0##*/}" 1>&2
        }

        [ "$_opt" ] || return 1

        case "$_opt" in
            '--'*)
                case "$1$2" in
                    '--'*) : ;;
                    "$1"'--'*) set -- "$2" ;;
                    *) return 1 ;;
                esac

                case "$_opt" in
                    "$1"'=')
                        copt_arg_invalid "$1"
                        exit 2
                    ;;
                    "$1"'='*)
                        _opt_arg="${_opt#"$1"=}"; _opt=; _opt_match="$1"; \
                        _shiftN=1
                        return 0
                    ;;
                    "$1")
                        _opt=; _opt_arg=; _opt_match="$1"; _shiftN=1
                        return 0
                    ;;
                esac
            ;;
            '-'*)
                case "$1$2" in
                    '-'*) : ;;
                    *) return 1 ;;
                esac

                case "$_opt" in
                    "$1")
                        _opt=; _opt_arg=; _opt_match="$1"; _shiftN=1
                        return 0
                    ;;
                    "$1"*)
                        _opt_arg="${_opt#"$1"}"; _opt=; _opt_match="$1"; \
                        _shiftN=1
                        return 0
                    ;;
                esac
            ;;
        esac

        return 1
    }

    # Description:
    # Within single quotes escape single quote(s) in string
    #
    # Parameters:
    # <"$1"+> - string
    #
    # Provides:
    # <"$_str"> - the escaped string | string
    #
    # Returns:
    # (0) escaped string | string
    #
    esc_sq() {
        [ "$1" ] || return 0

        _str="$1"

        case "$_str" in
            *"'"*)
                _str_ref="${_str%%\'*}'\\''"
                _str="${_str_ref}${_str#*\'}"

                while :; do case "$_str" in
                    "$_str_ref"*"'"*)
                        _str="${_str#*"$_str_ref"}"
                        _str_ref="$_str_ref${_str%%\'*}'\\''"
                        _str="$_str_ref${_str#*\'}"
                    ;;
                    *)
                        break
                    ;;
                esac done
            ;;
        esac

        _str="'$_str'"; printf "%s" "$_str"; shift

        while [ "$1" ]; do
            case "$1" in
                *"'"*) : ;;
                *) _str="$_str '$1'"; printf " '%s'" "$1"; shift && continue ;;
            esac

            _str_ref="${1%%\'*}'\\''"
            __str="${_str_ref}${1#*\'}"

            while :; do case "$__str" in
                "$_str_ref"*"'"*)
                    __str="${__str#*"$_str_ref"}"
                    _str_ref="$_str_ref${__str%%\'*}'\\''"
                    __str="$_str_ref${__str#*\'}"
                ;;
                *)
                    break
                ;;
            esac done

            _str="$_str '$__str'"; printf " '%s'" "$__str"; shift
        done
    }

    # Description:
    # Signify invalid operand count (max)[X>X]
    #
    # Parameters:
    # <$1> - invalid count
    # [$2] - valid count
    #
    opd_cmax() {
        printf "%s: Too many operands: %s\n" "${0##*/}" "$1"

        [ "$2" ] && printf " > max allowed: %s\n" "$2"

        printf "%s: Try '%s --help' for more information.\n" \
               "${0##*/}" "${0##*/}"
    } 1>&2

    # Description:
    # Signify invalid operand count (max)[X>1]
    #
    # Parameters:
    # <"$1"> - first operand
    # <"$2"> - second operand
    # ["$3"] - the next practicable operand
    #
    opd_max() {
        if [ "$3" ]; then
            printf "%s: Too many operands: '[%s]; [%s]; ...'\n" \
                   "${0##*/}" "$1" "$2"
        else
            printf "%s: Too many operands: '[%s]; [%s]'\n" "${0##*/}" "$1" "$2"
        fi
        printf "%s: Try '%s --help' for more information.\n" \
               "${0##*/}" "${0##*/}"
    } 1>&2

    # Description:
    # Signify invalid operand count (min)[0>X]
    #
    opd_min() {
        printf "%s: No operand specified.\n" "${0##*/}"
        printf "%s: Try '%s --help' for more information.\n" \
               "${0##*/}" "${0##*/}"
    } 1>&2

    # Description:
    # Signify invalid option argument
    #
    # Parameters:
    # <"$1"> - option
    # <"$2"> - argument
    # ["$3"+] - valid arguments
    #
    opt_err() {
        printf "%s: Invalid argument '%s' for '%s'\n" \
               "${0##*/}" "$2" "$1"
        shift 2

        if [ "$1" ]; then
            echo "Valid arguments are:"

            while [ "$1" ]; do
                printf " > '%s'\n" "$1"; shift
            done
        fi

        printf "%s: Try '%s --help' for more information.\n" \
               "${0##*/}" "${0##*/}"
    } 1>&2

    # Description:
    # Signify invalid option
    #
    # Parameters:
    # <"$1"> - option
    #
    opt_invalid() {
        printf "%s: Invalid option: '%s'\n" "${0##*/}" "$1"
        printf "%s: Try '%s --help' for more information.\n" \
               "${0##*/}" "${0##*/}"
    } 1>&2

    # Description:
    # Signify unknown (*) option
    #
    # Parameters:
    # <"$1"> - option
    #
    opt_unknown() {
        printf "%s: Unknown option: '%s'\n" "${0##*/}" "$1"
        printf "%s: Try '%s --help' for more information.\n" \
               "${0##*/}" "${0##*/}"
    } 1>&2

    # Description:
    # Signify unrecognized ('--') option
    #
    # Parameters:
    # <"$1"> - option
    #
    opt_unrecognized() {
        printf "%s: Unrecognized option: '%s'\n" "${0##*/}" "$1"
        printf "%s: Try '%s --help' for more information.\n" \
               "${0##*/}" "${0##*/}"
    } 1>&2

    # Description:
    # True if specific complex (argument) option
    #
    # Parameters:
    # <"$1"+> - *
    #
    # Uses:
    # <_opt> $ - the first positional parameter of the main environment
    # <_opt_arg> $ - the second positional parameter of the main environment
    #
    # Provides:
    # <"$_opt_arg"> - the option argument
    # <"$_opt_match"> - the literal option matched
    # <$_shiftN> - the shift count
    #
    # Returns:
    # (0) match
    # (1) no match
    #
    scopt() {
        scopt_arg_invalid() {
            printf "%s: Invalid argument specification for: '%s'\n" \
                   "${0##*/}" "$1" 1>&2
            printf "%s: Try '%s --help' for more information.\n" \
                   "${0##*/}" "${0##*/}" 1>&2
        }
        scopt_arg_missing() {
            printf "%s: Option '%s' requires an argument.\n" \
                   "${0##*/}" "$1" 1>&2
            printf "%s: Try '%s --help' for more information.\n" \
                   "${0##*/}" "${0##*/}" 1>&2
        }

        [ "$_opt" ] || return 1

        while [ "$1" ]; do
            case "$_opt " in
                "$1"'= ')
                    scopt_arg_invalid "$1"
                    exit 2
                ;;
                "$1"'='*)
                    _opt_arg="${_opt#"$1"=}"; _opt=; _opt_match="$1"; _shiftN=1
                    return 0
                ;;
                "$1"' ')
                    [ "$_opt_arg" ] || { scopt_arg_missing "$1"; exit 2; }

                    _opt=; _opt_match="$1"; _shiftN=2
                    return 0
                ;;
            esac

            shift
        done

        return 1
    }

    # Description:
    # True if specific optional-complex (possible argument) option
    #
    # Parameters:
    # <"$1"+> - *
    #
    # Uses:
    # <_opt> $ - the first positional parameter of the main environment
    #
    # Provides:
    # <"$_opt_arg"> - the option argument
    # <"$_opt_match"> - the literal option matched
    # <$_shiftN> - the shift count
    #
    # Returns:
    # (0) match
    # (1) no match
    #
    scopt_optional() {
        scopt_arg_invalid() {
            printf "%s: Invalid argument specification for: '%s'\n" \
                   "${0##*/}" "$1" 1>&2
            printf "%s: Try '%s --help' for more information.\n" \
                   "${0##*/}" "${0##*/}" 1>&2
        }

        [ "$_opt" ] || return 1

        while [ "$1" ]; do
            case "$_opt" in
                "$1"'=')
                    scopt_arg_invalid "$1"
                    exit 2
                ;;
                "$1"'='*)
                    _opt_arg="${_opt#"$1"=}"; _opt=; _opt_match="$1"; _shiftN=1
                    return 0
                ;;
                "$1")
                    _opt=; _opt_arg=; _opt_match="$1"; _shiftN=1
                    return 0
                ;;
            esac

            shift
        done

        return 1
    }

    # Description:
    # True if simple (no argument) option
    #
    # Parameters (<1+>):
    # ["$1"] - -*
    # ["$2"] - --*
    #
    # Uses:
    # <_opt> $ - the first positional parameter of the main environment
    #
    # Provides:
    # <"$_opt_match"> - the literal option matched
    # <$_shiftN> - the shift count
    # ["$_sopt_index"] - an index with encountered short options
    #
    # Returns:
    # (0) match
    # (1) no match
    #
    sopt() {
        [ "$_opt" ] || return 1

        case "$_opt" in
            '--'*)
                case "$1$2" in
                    '--'*) : ;;
                    "$1"'--'*) set -- "$2" ;;
                    *) return 1 ;;
                esac

                case "$_opt" in
                    "$1")
                        _opt=; _opt_match="$1"; _shiftN=1
                        return 0
                    ;;
                esac
            ;;
            '-'*)
                case "$1$2" in
                    '-'*) : ;;
                    *) return 1 ;;
                esac

                case "$_opt" in
                    "$1"*)
                        case :"$_sopt_index" in
                            :) _sopt_index="${1#?}" ;;
                            *) _sopt_index="$_sopt_index${1#?}" ;;
                        esac

                        _opt="-${_opt#??}"; _opt_match="$1"; _shiftN=1
                        return 0
                    ;;
                esac
            ;;
        esac

        return 1
    }

    # Description:
    # True if specific simple (no argument) option
    #
    # Parameters:
    # <"$1"+> - *
    #
    # Uses:
    # <_opt> $ - the first positional parameter of the main environment
    #
    # Provides:
    # <"$_opt_match"> - the literal option matched
    # <$_shiftN> - the shift count
    #
    # Returns:
    # (0) match
    # (1) no match
    #
    ssopt() {
        [ "$_opt" ] || return 1

        while [ "$1" ]; do
            case "$_opt" in
                "$1")
                    _opt=; _opt_match="$1"; _shiftN=1
                    return 0
                ;;
            esac

            shift
        done

        return 1
    }
}

# Description:
# Parse utility options
#
# Uses:
# <_opt> $ - {state - anything}; [iteration - X]
#
# Returns:
# (0) $_opt has been parsed
# (1) $_opt is not an option
#
options() {
    unset _sopt_index

    case "$_opt" in
        '-'*)
            sopt '--no-color' && { ncolor=1; }
            copt "--language" && { language="$_opt_arg"; }
            copt "--locale" && { locale="$_opt_arg"; }

            sopt '-d' '--direct-url' && { durl=1; }
            sopt '-i' '--invert-sort' && { invert=1; }
            sopt '-l' '--line-numbers' && { lnumbers=1; }
            sopt '-p' '--preserve-url' && { purl=1; }
            sopt '-s' '--short-commit' && { scommit=1; }
            sopt '-t' '--timestamp' && { tstamp=1; }
            sopt '-v' '--verbose' && { verbose=1; }

            copt '-o' '--output' && {
                assert 6 "$_opt_arg" || {
                    opt_err "$_opt_match" "$_opt_arg"; exit 2
                }
                get_fpath "$_opt_arg" 0 && tfile="$_path"
            }
        ;;
    esac

    [ "$_opt" ] || return 0

    case "$_opt" in
        '--'*)
            opt_unrecognized "$_opt"; exit 2
        ;;
        '-'*)
            case :"$_sopt_index" in
                :) opt_invalid "${_opt%"${_opt#??}"}"; exit 2 ;;
            esac

            case ${#_opt} in
                1) unset _opt _sopt_index; return 0 ;;
            esac

            options;
        ;;
    esac

    return 1
}

main() {
    # Source common functions
    main_functions;

    # Parse options
    while [ "$1" ]; do
        # Simulate global $N (positional parameters) shift
        #  > option functions modify when appropriate
        _shiftN=1

        # Simulate global $1/$2 (option/argument) handling
        #  > option functions modify when appropriate
        _opt="$1"; _opt_arg="$2"

        # Parse standard options
        #  > required to parse them first
        ssopt '-' && { opt_invalid "$1"; exit 2; }
        ssopt '--' && { shift && break; }
        ssopt '--help' && { usage; exit 0; }
        ssopt '--version' && { version; exit 0; }

        # Parse utility options
        #  > rc 1 if $_opt is not a valid option
        options || {
            break
        }

        # Move on positional parameters
        #  > either with default value or with option value
        shift "$_shiftN"
    done

    # Catch wrong input
    if [ ! "$1" ]; then
        opd_min; exit 2
    elif [ "$2" ]; then
        opd_cmax "$#" 1; exit 2
    fi

    # Convert relative path to absolute path
    set -- "$(get_fpath "$1")"

    # Execute the core function
    spatch "$1"

    # Check if RC is set, otherwise explicit success
    [ "$RC" ] && return "$RC" || return 0
}

main "$@"
