#!/bin/sh
# shellcheck disable=SC2048
# shellcheck disable=SC2086
# shellcheck disable=SC2181
# shellcheck disable=SC2254

: <<'notice'
 * SPDX-License-Identifier: GPL-3.0
 *
 * Copyright (C) 2020-2021 Dimitar Yurukov <mscalindt@protonmail.com>
 *
notice

usage() {
printf "%s" "\
Usage: spatch [options] [--] FILE
Sort commit/patch links by date.

Options:
  -d, --direct-url           assume URLs are valid patch links even if they do
                             not end with .patch
  -i, --invert-sort          sort from newest to oldest
  -l, --line-numbers         append line numbers to the sort output
  -o, --output=PATH          PATH is an absolute or relative location to which
                             the sort output shall be written
  -p, --preserve-url         preserve the URLs
  -t, --timestamp            append timestamp to the sort output
  -v, --verbose              show additional information unrelated to the sort
                             output
      --help     display this help text and exit
      --         specify end of options

External utilities dependency list:
awk, curl, date, rm, sort.
"
}

# Description:
# Get substring after (from / up to) specific (N)character(s) in a string
#
# Parameters:
# [$1] - from left to right N $2 character(s)
# <$2> - from character(s)
# [$3] - up to N $4 character(s)
# [$4] - up to character(s)
# <$5> - string
#
# Returns:
# (0) substring of $5 | undefined behaviour if $2/$4 not present
# (1) undefined behaviour
#
substr_after() {
    x=0

    if [ "$5" ]; then
        i=$(printf "%s" "$5")
        until [ $x -eq $1 ]; do
            i=$(printf "%s" "${i#*$2}")
            x=$((x + 1))
        done
        x=0
        ii="$i"
        until [ $x -eq $3 ]; do
            i=$(printf "%s" "${i#*$4}")
            x=$((x + 1))
        done
        i=$(printf "%s" "${ii%$i}")
    elif [ "$4" ]; then
        i=$(printf "%s" "$4")
        case "$1" in
            '' | *[!0-9]*)
                i=$(printf "%s" "${i##*$1}")
                ii="$i"
                until [ $x -eq $2 ]; do
                    i=$(printf "%s" "${i#*$3}")
                    x=$((x + 1))
                done
                i=$(printf "%s" "${ii%$i}")
            ;;
            *)
                until [ $x -eq $1 ]; do
                    i=$(printf "%s" "${i#*$2}")
                    x=$((x + 1))
                done
                ii="$i"
                i=$(printf "%s" "${i##*$3}")
                i=$(printf "%s" "${ii%$i}")
            ;;
        esac
    elif [ "$3" ]; then
        i=$(printf "%s" "$3")
        case "$1" in
            '' | *[!0-9]*)
                i=$(printf "%s" "${i##*$1}")
                ii="$i"
                i=$(printf "%s" "${i##*$2}")
                i=$(printf "%s" "${ii%$i}")
            ;;
            *)
                until [ $x -eq $1 ]; do
                    i=$(printf "%s" "${i#*$2}")
                    x=$((x + 1))
                done
            ;;
        esac
    else
        i=$(printf "%s" "${2##*$1}")
    fi

    if [ -n "$i" ]; then
        case "$i" in
            " "*) i=$(printf "%s" "${i# }") ;;
        esac
        case "$i" in
            *" ") i=$(printf "%s" "${i% }") ;;
        esac

        printf "%s" "${i}"
        return 0
    fi

    return 1
}

# Description:
# Get substring before (from / back to) specific (N)character(s) in a string
#
# Parameters:
# [$1] - from left to right N $2 character(s)
# <$2> - from character(s)
# [$3] - back to N $4 character(s)
# [$4] - back to character(s)
# <$5> - string
#
# Returns:
# (0) substring of $5 | undefined behaviour if $2/$4 not present
# (1) undefined behaviour
#
substr_before() {
    x=0

    if [ "$5" ]; then
        i=$(printf "%s" "$5")
        ii="$i"
        until [ $x -eq $1 ]; do
            i=$(printf "%s" "${i#*$2}")
            x=$((x + 1))
        done
        i=$(printf "%s" "${ii%$i}")
        x=0
        ii="$i"
        until [ $x -eq $3 ]; do
            i=$(printf "%s" "${i%$4*}")
            x=$((x + 1))
        done
        i=$(printf "%s" "${ii#$i}")
    elif [ "$4" ]; then
        i=$(printf "%s" "$4")
        case "$1" in
            '' | *[!0-9]*)
                ii="$i"
                i=$(printf "%s" "${i##*$1}")
                i=$(printf "%s" "${ii%$i}")
                ii="$i"
                until [ $x -eq $2 ]; do
                    i=$(printf "%s" "${i%$3*}")
                    x=$((x + 1))
                done
                i=$(printf "%s" "${ii#$i}")
            ;;
            *)
                ii="$i"
                until [ $x -eq $1 ]; do
                    i=$(printf "%s" "${i#*$2}")
                    x=$((x + 1))
                done
                i=$(printf "%s" "${ii%$i}")
                ii="$i"
                i=$(printf "%s" "${i%%$3*}")
                i=$(printf "%s" "${ii#$i}")
            ;;
        esac
    elif [ "$3" ]; then
        i=$(printf "%s" "$3")
        case "$1" in
            '' | *[!0-9]*)
                ii="$i"
                i=$(printf "%s" "${i##*$1}")
                i=$(printf "%s" "${ii%$i}")
                ii="$i"
                i=$(printf "%s" "${i%%$2*}")
                i=$(printf "%s" "${ii#$i}")
            ;;
            *)
                ii="$i"
                until [ $x -eq $1 ]; do
                    i=$(printf "%s" "${i#*$2}")
                    x=$((x + 1))
                done
                i=$(printf "%s" "${ii%$i}")
            ;;
        esac
    else
        i=$(printf "%s" "${2%$1*}")
    fi

    if [ -n "$i" ]; then
        case "$i" in
            " "*) i=$(printf "%s" "${i# }") ;;
        esac
        case "$i" in
            *" ") i=$(printf "%s" "${i% }") ;;
        esac

        printf "%s" "${i}"
        return 0
    fi

    return 1
}

# Description:
# Print specific line in a file
#
# Parameters:
# <$1> - line number
# <$2> - file
#
# Returns:
# (0) line's content
# (1) line empty | does not exist | file permission error
#
pline() {
    x=0
    unset i

    while read -r LINE || [ -n "$LINE" ]; do
        x=$((x + 1))
        if [ $x -eq $1 ]; then
            i=$(printf "%s" "${LINE}")
            break
        fi
    done < "$2"

    if [ -n "$i" ]; then
        printf "%s" "${i}"
        return 0
    fi
    
    return 1
}

# Description:
# Check the existence/position of a substring in a string
#
# Parameters:
# <$1> - substring
# <$2> - string
# [$3] - mode('1' - $1 is first character(s) of $2,
#             '2' - $1 is last character(s) of $2,
#             '3' - $1 is the string on its own)
#
# Returns:
# (0) substring exists
# (1) no substring
#
grep_str() {
    if [ $3 ]; then
        if [ $3 -eq 1 ]; then
            case "$2" in
                "$1"*) grepstr=0 && return 0 ;;
            esac
        elif [ $3 -eq 2 ]; then
            case "$2" in
                *"$1") grepstr=0 && return 0 ;;
            esac
        elif [ $3 -eq 3 ]; then
            case "$2" in
                "$1") grepstr=0 && return 0 ;;
            esac
        fi
    else
        case "$2" in
            *"$1"*) grepstr=0 && return 0 ;;
        esac
    fi

    return 1
}

# Description:
# Parse the content of a file
#
# Parameters:
# <$1> - file
# [$2] - mode('1' - wrap parsed lines in one trailing whitespace,
#             '2' - wrap parsed lines in two trailing whitespaces,
#             '3' - skip empty lines)
#
# Returns:
# (0) file's content | empty output (file)
# (1) file does not exist | permission error
#
fparse() {
    if [ $2 ]; then
        if [ $2 -eq 1 ]; then
            while read -r LINE || [ -n "$LINE" ]; do
                echo " $LINE "
            done < "$1"
        elif [ $2 -eq 2 ]; then
            while read -r LINE || [ -n "$LINE" ]; do
                echo "  $LINE  "
            done < "$1"
        elif [ $2 -eq 3 ]; then
            while read -r LINE || [ -n "$LINE" ]; do
                if [ -n "$LINE" ]; then
                    echo "$LINE"
                fi
            done < "$1"
        fi
    else
        while read -r LINE || [ -n "$LINE" ]; do
            echo "$LINE"
        done < "$1"
    fi

    return $?
}

# Description:
# Check command availability
#
# Parameters:
# <$1> - command
#
# Returns:
# (0) if command available,
# (127) if not
#
cmd_avail() {
    if command -v $1 > /dev/null 2>&1; then
        return 0
    fi

    return 127
}

# Description:
# Check glob expansion
#
# Parameters:
# <$1> - string
# <$2> - string
#
# Returns:
# (0) no expansion
# (1) one expansion
# (2) two or more expansions
#
tglob() {
    i="$1"
    ii="$2"

    set -- "$i"*"$ii"

    case $#-$1 in
        1-$i'*'$ii) return 0 ;;
        1-*$ii) return 1 ;;
        *) return 2 ;;
    esac
}

# Description:
# Remove specific character(s) in a string
#
# Parameters:
# <$1> - character(s)
# <$2> - string
#
# Returns:
# $2 without $1 characters,
# $2
#
remchars() {
    i=$IFS

    IFS=$1
    set -- $2

    IFS=""
    set -- $*

    printf "%s\n" "$*"

    IFS=$i
}

# Description:
# Convert relative path to absolute path
#
# Parameters:
# <$1> - path
#
# Returns:
# $PWD/$1,
# $1
#
get_fpath() {
    case "$1" in
        "/"*) ;;
        *) i=$(printf "%s/%s" "$PWD" "$1") && set -- "$i" ;;
    esac

    printf "%s" "$1"
}

# Description:
# Print error and exit
#
# Parameters:
# <$1> - text
# <$2> - exit code
#
err() {
    printf "\n%bERROR:%b %s\n\n" "\033[1;31m" "\033[0m" "$1"
    exit $2
}

# Description:
# Print a warning
#
# Parameters:
# <$1> - text
#
warn() {
    printf "%bWARNING:%b %s\n" "\033[1;33m" "\033[0m" "$1"
}

# Description:
# Print info
#
# Parameters:
# <$1> - text
#
info() {
    printf "%bINFO:%b %s\n" "\033[1;37m" "\033[0m" "$1"
}

spatch_check() {
    if [ ! -f "$1" ]; then
        err "'$1' is not a file." "1"
    fi
}

spatch_work() {
    TMP_DIR="${TMPDIR:-/tmp}"
    TMP_FILE="${TMPDIR:-/tmp}"/spatch_tmp
    TMP_FILE2="${TMPDIR:-/tmp}"/spatch_tmp2

    if cmd_avail curl; then
        URL_TOOL='curl'
        URL_TOOL_ARGS='-Of'
    elif cmd_avail aria2c; then
        URL_TOOL='aria2c'
        URL_TOOL_ARGS=''
    elif cmd_avail wget; then
        URL_TOOL='wget'
        URL_TOOL_ARGS=''
    elif cmd_avail axel; then
        URL_TOOL='axel'
        URL_TOOL_ARGS=''
    else
        err "No URL download tool available. (curl/aria2/wget/axel)" "127"
    fi

    rm -f "$TMP_DIR"/*.patch
    cd "$TMP_DIR" || err "Line '$LINENO' failed." "1"
}

spatch_exec() {
    while read -r LINE || [ -n "$LINE" ]; do
        if ! grep_str "://" " $LINE "; then
            if [ -n "$LINE" ] && [ -n "$verbose" ]; then
                warn "'$LINE' has no URL. (*://*)"
            fi
            continue
        fi

        TMP=$(substr_before "://" "1" " " " $LINE ")
        URL=$(substr_after "://" "1" " " " $LINE ")
        URL=$(printf "%s%s" "$TMP" "$URL")

        if [ -z $durl ]; then
            if ! grep_str ".patch" "$URL"; then
                URL=${URL}.patch
            fi
        fi

        if [ -n "$verbose" ]; then
            NUM=$((1 + CNT))
            info "URL ($NUM) - '$URL'."
            CNT=$NUM
        fi

        $URL_TOOL ${URL_TOOL_ARGS} $URL > /dev/null 2>&1 &
    done < "$1"
    wait

    if tglob "$TMP_DIR/" ".patch"; then
        spatch_post;
        err "No patches found." "1"
    else
        for PATCH in "$TMP_DIR"/*.patch; do
            CSTR=$(pline "1" "$PATCH")
            CSTR=$(substr_after "1" " " "1" " " "$CSTR")
            DSTR=$(pline "3" "$PATCH")
            DSTR=$(substr_after "2" " " "4" " " "$DSTR")

            if [ -n "$purl" ]; then
                TMP=$(fparse "$1" "2")
                CSTR=$(substr_before "$CSTR" "1" " " "$TMP")
            fi

            echo "$CSTR $DSTR" >> "$TMP_FILE"
        done
    fi

    sort -t " " -k4.1,4.4 \
                -k3.1,3.3M \
                -k2.1n \
                -k5.1,5.2 \
                -k5.4,5.5 \
                -k5.7,5.8 "$TMP_FILE" > "$TMP_FILE2"
    fparse "$TMP_FILE2" > "$TMP_FILE"

    if [ -n "$invert" ]; then
        awk '{a[i++]=$0;} END {for (j=i-1; j>=0;) print a[j--];}' \
            "$TMP_FILE" > "$TMP_FILE2"
        fparse "$TMP_FILE2" > "$TMP_FILE"
    fi

    if [ -n "$lnumbers" ]; then
        :> "$TMP_FILE2"
        if [ -n "$CNT" ]; then unset CNT; fi
        while read -r LINE; do
            NUM=$((1 + CNT))
            LINE="$NUM - $LINE"
            CNT=$NUM
            echo "$LINE" >> "$TMP_FILE2"
        done < "$TMP_FILE"
        fparse "$TMP_FILE2" > "$TMP_FILE"
    fi

    if [ -n "$tstamp" ]; then
        TMP=$(date "+%b %-e, %T %:z %Y")
        echo "TIMESTAMP: $TMP" >> "$TMP_FILE"
    fi

    if [ -n "$tfile" ]; then
        fparse "$TMP_FILE2" > "$tfile"
    else
        while read -r LINE; do
            echo "$LINE"
        done < "$TMP_FILE"
    fi
}

spatch_post() {
    rm -f "$TMP_DIR"/*.patch
    rm -f "$TMP_FILE"
    rm -f "$TMP_FILE2"
}

spatch() {
    spatch_check "$1"
    spatch_work;
    spatch_exec "$1"
    spatch_post;
}

main() {
    # For security reasons, unset specific internal variables if they exist
    if [ -n "$CNT" ]; then unset CNT; fi
    if [ -n "$tfile" ]; then unset tfile; fi

    # Serve the script until no script parameters passed
    while [ "$1" ]; do
        # Reset variables from previous loop run
        if [ -n "$grepstr" ]; then unset grepstr; fi

        case "$1" in
            # Parse specific options first
            "--") shift && break ;;
            "--help") usage && return 0 ;;

            # Parse options
            "--"*)
                i=$(substr_after "1" "--" "$1")

                if grep_str "output" "$i" "1"; then
                    if grep_str "output=" "$i" "1"; then
                        tfile=$(substr_after "1" "=" "$i")
                        tfile=$(get_fpath "$tfile")
                    elif ! grep_str "output " "$i " "1"; then
                        tfile=$(substr_after "2" "t" "$i")
                        tfile=$(get_fpath "$tfile")
                    elif [ "$2" ]; then
                        tfile="$2"
                        tfile=$(get_fpath "$tfile")
                        shift
                    fi
                fi

                if grep_str "direct-url" "$i" "3"; then durl=1; fi
                if grep_str "invert-sort" "$i" "3"; then invert=1; fi
                if grep_str "line-numbers" "$i" "3"; then lnumbers=1; fi
                if grep_str "preserve-url" "$i" "3"; then purl=1; fi
                if grep_str "timestamp" "$i" "3"; then tstamp=1; fi
                if grep_str "verbose" "$i" "3"; then verbose=1; fi

                if [ ! $grepstr ]; then
                    warn "Unrecognized option: '$1'"
                fi
                shift
            ;;
            "-"*)
                i=$(substr_after "1" "-" "$1")

                if grep_str "o" "$i" "1"; then
                    if grep_str "o=" "$i" "1"; then
                        tfile=$(substr_after "1" "=" "$i")
                        tfile=$(get_fpath "$tfile")
                        shift && continue
                    elif ! grep_str "o " "$i " "1"; then
                        tfile=$(substr_after "1" "o" "$i")
                        tfile=$(get_fpath "$tfile")
                        shift && continue
                    elif [ "$2" ]; then
                        tfile="$2"
                        tfile=$(get_fpath "$tfile")
                        shift 2 && continue
                    fi
                fi

                if grep_str "d" "$i"; then durl=1; fi
                if grep_str "i" "$i"; then invert=1; fi
                if grep_str "l" "$i"; then lnumbers=1; fi
                if grep_str "p" "$i"; then purl=1; fi
                if grep_str "t" "$i"; then tstamp=1; fi
                if grep_str "v" "$i"; then verbose=1; fi

                i=$(remchars "dilptv" "$i")
                if [ -n "$i" ]; then
                    warn "Unrecognized option(s): '-$i'"
                fi
                shift
            ;;

            *) break ;;
        esac
    done

    # Catch wrong input
    if [ ! "$1" ]; then
        err "No file specified." "2"
    elif [ "$2" ]; then
        err "Too many operands. ($#)" "2"
    fi

    # Convert relative path to absolute path
    TMP=$(get_fpath "$1")
    set -- "$TMP"

    # Execute the core function
    spatch "$1"

    # Explicit success
    return 0
}

main "$@"
