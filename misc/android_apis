#!/bin/sh
# SPDX-License-Identifier: GPL-3.0-only
# Copyright (C) 2021-2022 Dimitar Yurukov <mscalindt@protonmail.com>
# Usage (intended): source android_apis

# > Install an APK contained in URL for user 0
# Arguments: <"$1"> - APK URL
pkg_install() (
    _errh() { [ -d "$DIR" ] && rm -rf "$DIR"; return "$1"; }
    trap '_errh $?' INT TERM EXIT; set -e

    DIR='/data/local/tmp/pkg_install'
    FILE='/data/local/tmp/pkg_install/00.apk'

    mkdir -p "$DIR"
    curl --location "$1" --output "$FILE"
    pm install --user 0 "$FILE"
)

# > Install an APK split into chunks contained in URLs for user 0
# Arguments: <"$1+"> - APK URL of sequential chunk
pkg_install_chunks() (
    _errh() { [ -d "$DIR" ] && rm -rf "$DIR"; return "$1"; }
    trap '_errh $?' INT TERM EXIT; set -e

    DIR='/data/local/tmp/pkg_install'
    COUNT=0
    FARGS=

    mkdir -p "$DIR"

    while [ "$1" ]; do
        COUNT=$((COUNT + 1))
        FILE="$DIR"/0"$COUNT".apk

        case :"$FARGS" in
            :) FARGS="'$FILE'" ;;
            *) FARGS="$FARGS '$FILE'" ;;
        esac

        curl --location "$1" --output "$FILE" &

        shift
    done; wait

    FILE="$DIR"/00.apk

    eval set -- "$FARGS"
    cat "$@" > "$FILE"
    pm install --user 0 "$FILE"
)

# > Remove (uninstall) a package for user 0
# Arguments: <"$1"> - package name
pkg_remove() (
    _errh() { return "$1"; }
    trap '_errh $?' INT TERM EXIT; set -e

    DIR='/storage/emulated/0/Android'

    pm uninstall --user 0 "$1"
    rm -rf "$DIR/data/$1"
    rm -rf "$DIR/media/$1"
    rm -rf "$DIR/obb/$1"
)

# > Reset (clear all data of) a package for user 0
# Arguments: <"$1"> - package name
pkg_reset() (
    _errh() { return "$1"; }
    trap '_errh $?' INT TERM EXIT; set -e

    DIR='/storage/emulated/0/Android'

    pm clear --user 0 "$1"

    rm -rf "$DIR/data/$1"/*
)

# > Restore (reinstall) deleted system package for user 0
# Arguments: <"$1"> - package name
pkg_restore() {
    pm install-existing --user 0 "$1"
}
