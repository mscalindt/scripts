#!/bin/sh
# Usage (intended): source android_apis

: <<'notice'
 * SPDX-License-Identifier: GPL-3.0
 *
 * Copyright (C) 2021 Dimitar Yurukov <mscalindt@protonmail.com>
 *
notice

# > Install an APK contained in URL for user 0 using ADB
# Arguments: <"$1"> - APK URL
adb_pkg_install() {
    adb shell \
<< EOF
    DIR="/data/local/tmp/pkg_install"
    FILE="/data/local/tmp/pkg_install/00.apk"

    mkdir "$DIR" || return $?
    curl --location "$1" --output "$FILE" || { rm -rf "$DIR"; return 1; }
    pm install --user 0 "$FILE" || { rm -rf "$DIR"; return 1; }
    rm -rf "$DIR" || return $?
EOF
}

# > Install an APK split into chunks contained in URLs for user 0 using ADB
# Arguments: <"$1+"> - APK URL of sequential chunk
adb_pkg_install_chunks() {
    adb shell \
<<EOF
  {
    DIR="/data/local/tmp/pkg_install"
    FILE="/data/local/tmp/pkg_install/00.apk"
    COUNT=0

    mkdir "$DIR" || return $?

    for URL in $*; do
        [ -n "\$FARGS" ] && FARGS="\${FARGS} \$FILE" || FARGS="\$FILE"
        curl --location "\$URL" --output "\$FILE" || \
        {
            rm -rf "$DIR"; return 1
        }
        COUNT=\$((COUNT + 1))
        FILE="/data/local/tmp/pkg_install/0\${COUNT}.apk"
    done
    cat \$FARGS > "\$FILE" || { rm -rf "$DIR"; return 1; }

    pm install --user 0 "\$FILE" || { rm -rf "$DIR"; return 1; }

    rm -rf "$DIR" || return $?
  }
EOF
}

# > Remove (uninstall) a package for user 0 using ADB
# Arguments: <"$1"> - package name
adb_pkg_remove() {
    adb shell pm uninstall --user 0 "$1"
}

# > Reset (clear all data of) a package for user 0 using ADB
# Arguments: <"$1"> - package name
adb_pkg_reset() {
    adb shell pm clear --user 0 "$1"
}

# > Restore (reinstall) deleted system package for user 0 using ADB
# Arguments: <"$1"> - package name
adb_pkg_restore() {
    adb shell pm install-existing --user 0 "$1"
}

# > Install an APK contained in URL for user 0
# Arguments: <"$1"> - APK URL
pkg_install() {
    DIR="/data/local/tmp/pkg_install"
    FILE="/data/local/tmp/pkg_install/00.apk"

    mkdir "$DIR" || return $?
    curl --location "$1" --output "$FILE" || { rm -rf "$DIR"; return 1; }
    pm install --user 0 "$FILE" || { rm -rf "$DIR"; return 1; }
    rm -rf "$DIR" || return $?
}

# > Install an APK split into chunks contained in URLs for user 0
# Arguments: <"$1+"> - APK URL of sequential chunk
pkg_install_chunks() {
  {
    DIR="/data/local/tmp/pkg_install"
    FILE="/data/local/tmp/pkg_install/00.apk"
    COUNT=0

    mkdir "$DIR" || return $?

    for URL in $*; do
        [ -n "$FARGS" ] && FARGS="${FARGS} $FILE" || FARGS="$FILE"
        curl --location "$URL" --output "$FILE" || \
        {
            rm -rf "$DIR"; return 1
        }
        COUNT=$((COUNT + 1))
        FILE="/data/local/tmp/pkg_install/0${COUNT}.apk"
    done
    cat $FARGS > "$FILE" || { rm -rf "$DIR"; return 1; }

    pm install --user 0 "$FILE" || { rm -rf "$DIR"; return 1; }

    rm -rf "$DIR" || return $?
  }
}

# > Remove (uninstall) a package for user 0
# Arguments: <"$1"> - package name
pkg_remove() {
    pm uninstall --user 0 "$1"
}

# > Reset (clear all data of) a package for user 0
# Arguments: <"$1"> - package name
pkg_reset() {
    pm clear --user 0 "$1"
}

# > Restore (reinstall) deleted system package for user 0
# Arguments: <"$1"> - package name
pkg_restore() {
    pm install-existing --user 0 "$1"
}
